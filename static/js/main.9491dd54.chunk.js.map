{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","newTaskTitle","setNewTaskTitle","addTask","title","onChange","e","currentTarget","value","onKeyPress","charCode","onClick","tasks","map","t","type","checked","isDone","removeTask","id","changeFilter","App","v1","setTasks","filter","setFilter","tasksForTodolist","className","filteredTasks","newTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAqBO,SAASA,EAAUC,GAAkB,MAGAC,mBAAS,IAHT,mBAGjCC,EAHiC,KAGnBC,EAHmB,KAMlCC,EAAU,WACZJ,EAAMI,QAAQF,GACdC,EAAgB,KAuBpB,OACI,6BACI,4BAAKH,EAAMK,OADf,IAEI,6BACI,2BACIC,SAxBQ,SAACC,GAGrBJ,EAAgBI,EACZC,cACAC,QAoBQA,MAAOP,EACPQ,WAjBU,SAACH,GACJ,KAAfA,EAAEI,UACFP,OAiBI,4BACIQ,QAASR,GADb,MAIJ,4BAEQJ,EAAMa,MAAMC,KAAK,SAACC,GAId,OAAQ,4BACJ,2BACIC,KAAK,WACLC,QAASF,EAAEG,SAHX,IAIJ,8BAAOH,EAAEV,OAJL,IAKJ,4BAAQO,QAPW,kBAAMZ,EAAMmB,WAAWJ,EAAEK,MAO5C,UAKhB,6BACI,4BAAQR,QAlCM,WAAOZ,EAAMqB,aAAc,SAkCzC,OACA,4BAAQT,QAlCS,WAAOZ,EAAMqB,aAAc,YAkC5C,UACA,4BAAQT,QAlCY,WAAOZ,EAAMqB,aAAc,eAkC/C,e,YCjBDC,MAxDf,WAAe,MAGarB,mBAAU,CAC9B,CAAEmB,GAAIG,cAAMlB,MAAO,WAAYa,QAAQ,GACvC,CAAEE,GAAIG,cAAMlB,MAAO,KAAMa,QAAQ,GACjC,CAAEE,GAAIG,cAAMlB,MAAO,WAAYa,QAAQ,GACvC,CAAEE,GAAIG,cAAMlB,MAAO,aAAca,QAAQ,GACzC,CAAEE,GAAIG,cAAMlB,MAAO,WAAYa,QAAQ,GACvC,CAAEE,GAAIG,cAAMlB,MAAO,UAAWa,QAAQ,KAT/B,mBAGNL,EAHM,KAGCW,EAHD,OAmBevB,mBAA6B,OAnB5C,mBAmBNwB,EAnBM,KAmBEC,EAnBF,KAoBPC,EAAmBd,EAuBvB,MAtBmB,WAAXY,IACAE,EAAmBd,EAAMY,QAAQ,SAAAV,GAAC,OAAiB,IAAbA,EAAEG,WAE7B,cAAXO,IACAE,EAAmBd,EAAMY,QAAQ,SAAAV,GAAC,OAAiB,IAAbA,EAAEG,WAmB5C,yBAAKU,UAAW,OACZ,kBAAC7B,EAAD,CACIM,MAAO,gBACPQ,MAAOc,EACPR,WAnCZ,SAAqBC,GACjB,IAAIS,EAAgBhB,EAAMY,QAAQ,SAACV,GAAD,OAAOA,EAAEK,KAAOA,KAClDI,EAAUK,IAkCFR,aAtBZ,SAAuBZ,GACnBiB,EAAWjB,IAsBHL,QAlBZ,SAAkBC,GACd,IAKIyB,EAAQ,CALD,CACPV,GAAIG,cACJlB,MAAOA,EACPa,QAAQ,IAEA,mBAAaL,IACzBW,EAAUM,QCtCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9491dd54.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\n\r\n// условия типов пропсов для тасок\r\ntype TaskType = { //type какого типа будут таски, использующиеся в PropsType  Array<TaskType>\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n// условия типов пропсов для функции тудулист\r\ntype PropsType = {\r\n    title: string // в title можно писать только строку\r\n    tasks: Array<TaskType> // тип массив объектов // type TaskType\r\n    // tasks: TaskType []  - можно так же писать и будет работать\r\n    removeTask: (taskId: string) => void // удаление тасок происходит только по id и типу string\r\n    changeFilter: (value: FilterValuesType ) => void // в changeFilter можно указать только строку и точное название (\"All\" |(<- или) \"Active\" |(<- или) \"Completed\") или алл или актив или комплетед. ТС будет следить за правильностью написания данных\r\n    addTask: (title: string) => void // функция которая принимает title string\r\n}\r\n\r\n\r\nexport function Todolist (props: PropsType) { // props: any - что угодно, тоесть не задали четко тип, который будет отслеживаться\r\n\r\n    //стейт новых тасок.\r\n    const [newTaskTitle, setNewTaskTitle] = useState('');\r\n\r\n    // добавление новой таски\r\n    const addTask = () => { // в callback функции отдаем значение наверх в стейт апп\r\n        props.addTask(newTaskTitle); // в пропсах к нам приходит функция добавления новой таски. в эту функцию мы кладем значения новой таски из стейта новых тасок и передаем это в колбеках\r\n        setNewTaskTitle(''); // зануляем значение в input == очистить значение в стейте\r\n    }\r\n\r\n    // читаем введенные значения в инпуте и отправляем его наверх в апп с помощью колбек функции\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // e: ChangeEvent<HTMLInputElement> - сюда приходят значения с поля ввода ( простыми словами введенные, пользователем, значения.) ChangeEvent происходит с инпутом (HTMLInputElement)\r\n        // берем текушие значения из инпута(e: ChangeEvent<HTMLInputElement>)  и преобразуем их в функцию (setNewTaskTitle) добавления нового значения в title. значение отлавливаем из inputa (e.currentTarget.value)\r\n        setNewTaskTitle(e. //event сокрщ. е. - любое событие, которое происходит в объектной модели документа\r\n            currentTarget. // обработчик события (ловим событие) e.currentTarget Определяет элемент, в котором в данный момент обрабатывается событие, при движении события внутри DOM. currentTarget: это элемент, на который вы фактически связали событие. Это никогда не изменится. target: какой бы элемент ни был на самом деле нажат. Он может меняться, поскольку это может быть внутри элемента, к которому было связано событие.\r\n            value); // мы можем получить данные из этого поля ввода. А после, например, вывести их в консоль\r\n    }\r\n\r\n    // добавляем таску с ENTER\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => { //берем событие с клавиатуры из инпута  (e: KeyboardEvent<HTMLInputElement>) KeyboardEvent происходит с инпутом (HTMLInputElement)\r\n        if (e.charCode === 13) { // charCode это значение кнопок клавы на машином языке, понять номер каждой клавиши можно на сайте https://keycode.info/. если нажатие клавиши на клаве ентер, то по чаркоду это 13, если это равно по типу 13 то добавь новую таску\r\n            addTask(); // добавь таску\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => {props.changeFilter (\"All\")} // кнопка all отдает значение наверх и в APP уже меняется стейт\r\n    const onActiveClickHandler = () => {props.changeFilter (\"Active\")} // кнопка Active отдает значение наверх и в APP уже меняется стейт\r\n    const onCompletedClickHandler = () => {props.changeFilter (\"Completed\")} // кнопка Completed отдает значение наверх и в APP уже меняется стейт\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3> {/*заголовки тасок*/}\r\n            <div>\r\n                <input //поле ввода\r\n                    onChange={onChangeHandler} // callback // onChange показывает и позволяет изменять значения поля ввода\r\n                    value={newTaskTitle} // callback // получаем данные из поля ввода\r\n                    onKeyPress={onKeyPressHandler} // callback // (onKeyPress - когда клавиша нажата. onKeyDown - когда клавиша нажата, но не отпущена. onKeyUp когда клавиша поднята. onKeyDown+onKeyUp = onKeyPress) при нажатии enter добавляем таску\r\n                />\r\n                <button\r\n                    onClick={addTask} //при нажатии на кнопку вызываем функцию addTask и отдаем значение обратно наверх, где сработает функция добавления таски (addTask для app)\r\n                >+</button>\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map ((t) => { // метод map на основе всех элементов создает новый массив с видоизменными элементами (другими объектами)\r\n\r\n                        const onClickHandler = () => props.removeTask(t.id) //при нажатии кнопки удаляется таска. ВАЖНО функция removeTask вызывается и туда залетают параметры с id и улетает назад в колбеке\r\n\r\n                        return (<li>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={t.isDone}/> {/*состояние галки*/}\r\n                            <span>{t.title}</span> {/*сами таски*/}\r\n                            <button onClick={onClickHandler}>x</button>\r\n                        </li>)\r\n                        })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button onClick={onAllClickHandler}>All</button>\r\n                <button onClick={onActiveClickHandler}>Active</button>\r\n                <button onClick={onCompletedClickHandler}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {createHook} from \"async_hooks\";\r\nimport {v1} from \"uuid\";\r\n\r\n// Ошибки:\r\n// failed to compile: is not defined - не определено\r\n\r\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\" ; // тип пропсов для кнопок\r\n\r\nfunction App() {\r\n\r\n    //стейт тасок\r\n    let [tasks, setTasks] = useState ([   // массив тасок const - неизменяемо\r\n        { id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        { id: v1(), title: \"JS\", isDone: true},\r\n        { id: v1(), title: \"React js\", isDone: false},\r\n        { id: v1(), title: \"TypeScript\", isDone: true},\r\n        { id: v1(), title: \"Rest API\", isDone: false},\r\n        { id: v1(), title: \"GraphQL\", isDone: false}\r\n    ]);\r\n\r\n    // удаление таски\r\n    function removeTask (id: string) {\r\n        let filteredTasks = tasks.filter( (t) => t.id !== id) // метод filter массива пробегает по всем объектам и заносит в новый объект только те элементы, которые удоволетворяют условиям. в данном случае по ID\r\n        setTasks (filteredTasks);\r\n    }\r\n\r\n    // юзабельность кнопок алл, актив, комлитед\r\n    let [filter, setFilter] = useState <FilterValuesType> (\"All\");\r\n    let tasksForTodolist = tasks;\r\n        if (filter === \"Active\") {\r\n            tasksForTodolist = tasks.filter (t => t.isDone === false);\r\n        }\r\n        if (filter === \"Completed\") {\r\n            tasksForTodolist = tasks.filter (t => t.isDone === true);\r\n        }\r\n    function changeFilter (value: FilterValuesType) {\r\n        setFilter (value);\r\n    }\r\n\r\n    // добавление новой таски\r\n    function addTask (title: string) {\r\n        let task = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        };\r\n        let newTasks = [task, ...tasks];\r\n        setTasks (newTasks);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <Todolist\r\n                title={\"What to learn\"} // заголовки компоненты\r\n                tasks={tasksForTodolist}  // сами таски\r\n                removeTask={removeTask} //  удаление таски\r\n                changeFilter={changeFilter} // юзабельность кнопок all active completed\r\n                addTask={addTask} // добавление таски\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}