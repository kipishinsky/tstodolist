{"version":3,"sources":["serviceWorker.ts","store/reducers/todolists/todolists-reducer.ts","store/reducers/tasks/tasks-reducer.ts","store/reducers/app/app-reducer.ts","store/reducers/auth/auth-reducer.ts","store/store.ts","utilities/types/todolists/tasks/tasks-type.ts","components/generic-components/add-new-item/AddNewItemComponent.tsx","components/generic-components/change-title-item/ChangeTitleNameComponent.tsx","components/todolists-lists/todolist/task/Task.tsx","utilities/settings-query-api/setting-api.ts","api/tasks/tasks-api.ts","store/thunk/handle-error/HandleErrorUtils.ts","store/thunk/tasks/tasks-thunks.ts","components/todolists-lists/todolist/Todolist.tsx","api/todolist/todolists-api.ts","components/todolists-lists/Todolists.tsx","store/thunk/todolists/todolist-thunks.ts","api/login/login-api.ts","components/auth/Login.tsx","store/thunk/auth/auth-thunks.ts","components/generic-components/error-snackbar/ErrorSnackBar.tsx","components/app/App.tsx","store/thunk/app/app-thunks.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","slice","createSlice","name","initialState","reducers","removeTodolistAC","state","action","index","findIndex","tl","id","payload","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodoTitleAC","title","changeTitle","changeTodoListFilterAC","filterValue","setTodolistsAC","todolists","map","changeTodolistEntityStatusAC","status","todolistsReducer","reducer","actions","removeTasksAC","tasks","todolistId","taskId","addTasksAC","task","todoListId","updateTaskAC","model","changeTitleTaskAC","newTitleTask","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","error","initialized","setStatusAC","setErrorAC","setAppInitializedAC","init","appReducer","isLoggedIn","setIsLoggedInAC","value","authReducer","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","TaskStatuses","TaskPriorities","AddNewItemComponent","React","memo","addNewItem","disabled","console","log","useState","addNewTitle","setAddNewTitle","setError","addNewTask","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","onClick","color","AddBox","ChangeTitleNameComponent","props","editModeHook","setEditModeHook","titleChangeNameHook","setTitleChangeNameHook","onBlur","autoFocus","onDoubleClick","changeTitleValue","Task","onChangeTitle","useCallback","newItemValue","changeTaskTitle","key","className","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","removeTask","Delete","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","get","newTitle","post","delete","put","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","changeTaskStatusTC","domainModel","getState","find","t","apiModel","description","completed","priority","startDate","deadline","then","res","resultCode","catch","TodoList","demo","useDispatch","useEffect","items","onClickAllButton","changeFilterTodoist","onClickActiveButton","onClickComletedButton","changeTodoListTitleCallBack","newChangeTitleValue","changeTodoListTitle","tasksForTodoList","removeTodoList","Button","todolistsAPI","updateTitle","Todolists","useSelector","removeTaskTC","tasksNewTitleInput","item","tasksId","todoListsId","tasksTitle","changeFilterTodolist","addNewTodoList","addTodolistsTC","Grid","container","style","padding","spacing","allTodolistTasks","Paper","to","loginApi","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","Alert","elevation","ErrorSnackBar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","render","exact","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c101b307.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FilterValuesType, TodolistsReducerType, TodolistType} from '../../../utilities/types/todolists/todolists-types'\r\nimport {RequestStatusType} from '../../../utilities/types/error-status/err-st-types'\r\n\r\nconst initialState: Array<TodolistsReducerType> = []\r\n\r\nconst slice = createSlice({\r\n\tname: 'todolist',\r\n\tinitialState: initialState,\r\n\treducers: {\r\n\t\tremoveTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.id)\r\n\t\t\tif (index > -1) {\r\n\t\t\t\tstate.splice(index, 1)\r\n\t\t\t}\r\n\t\t},\r\n\t\taddTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n\t\t\tstate.unshift({...action.payload.todolist, filter: 'All', entityStatus: 'idle'})\r\n\t\t},\r\n\t\tchangeTodoTitleAC(state, action: PayloadAction<{ id: string, changeTitle: string }>) {\r\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.id)\r\n\t\t\tstate[index].title = action.payload.changeTitle\r\n\t\t},\r\n\t\tchangeTodoListFilterAC(state, action: PayloadAction<{ id: string, filterValue: FilterValuesType }>) {\r\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.id)\r\n\t\t\tstate[index].filter = action.payload.filterValue\r\n\t\t},\r\n\t\tsetTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n\t\t\treturn action.payload.todolists.map(tl => ({...tl, filter: 'All', entityStatus: 'idle'}))\r\n\t\t},\r\n\t\tchangeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.id)\r\n\t\t\tstate[index].entityStatus = action.payload.status\r\n\t\t},\r\n\t}\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n//action\r\nexport const {\r\n\tremoveTodolistAC, addTodolistAC, changeTodoTitleAC,\r\n\tchangeTodoListFilterAC, setTodolistsAC, changeTodolistEntityStatusAC\r\n} = slice.actions","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from '../todolists/todolists-reducer'\r\nimport {AppTasksType} from '../../../utilities/types/app/app-types'\r\nimport {TaskType, UpdateDomainTaskType} from '../../../utilities/types/todolists/tasks/tasks-type'\r\n\r\nconst initialState: AppTasksType = {}\r\n\r\nconst slice = createSlice({\r\n\tname: 'todolist',\r\n\tinitialState: initialState,\r\n\treducers: {\r\n\t\tremoveTasksAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n\t\t\tconst tasks = state[action.payload.todolistId]\r\n\t\t\tconst index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n\t\t\tif (index > -1) {\r\n\t\t\t\ttasks.splice(index, 1)\r\n\t\t\t}\r\n\t\t},\r\n\t\taddTasksAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n\t\t\tstate[action.payload.task.todoListId].unshift(action.payload.task)\r\n\t\t},\r\n\t\tupdateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskType, todolistId: string }>) {\r\n\t\t\tconst tasks = state[action.payload.todolistId]\r\n\t\t\tconst index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n\t\t\tif (index > -1) {\r\n\t\t\t\ttasks[index] = {...tasks[index], ...action.payload.model}\r\n\t\t\t}\r\n\t\t},\r\n\t\tchangeTitleTaskAC(state, action: PayloadAction<{ taskId: string, newTitleTask: string, todolistId: string }>) {\r\n\t\t\tconst tasks = state[action.payload.todolistId]\r\n\t\t\tconst index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n\t\t\tif (index > -1) {\r\n\t\t\t\ttasks[index] = {...tasks[index], title: action.payload.newTitleTask}\r\n\t\t\t}\r\n\t\t},\r\n\t\tsetTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n\t\t\tstate[action.payload.todolistId] = action.payload.tasks\r\n\t\t}\r\n\t},\r\n\textraReducers(builder) {\r\n\t\tbuilder.addCase(addTodolistAC, (state, action) => {\r\n\t\t\tstate[action.payload.todolist.id] = []\r\n\t\t})\r\n\t\tbuilder.addCase(removeTodolistAC, (state, action) => {\r\n\t\t\tdelete state[action.payload.id]\r\n\t\t})\r\n\t\tbuilder.addCase(setTodolistsAC, (state, action) => {\r\n\t\t\taction.payload.todolists.forEach((tl: any) => {\r\n\t\t\t\tstate[tl.id] = []\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n//action\r\nexport const {removeTasksAC, addTasksAC,\r\n\tupdateTaskAC, changeTitleTaskAC, setTasksAC} = slice.actions\r\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AppInitialStateType} from '../../../utilities/types/app/app-types'\r\nimport {RequestStatusType} from '../../../utilities/types/error-status/err-st-types'\r\n\r\nconst initialState: AppInitialStateType = {\r\n\tstatus: 'loading',\r\n\terror: null,\r\n\tinitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n\tname: 'app',\r\n\tinitialState: initialState,\r\n\treducers: {\r\n\t\tsetStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n\t\t\tstate.status = action.payload.status\r\n\t\t},\r\n\t\tsetErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n\t\t\tstate.error = action.payload.error\r\n\t\t},\r\n\t\tsetAppInitializedAC(state, action: PayloadAction<{ init: boolean }>) {\r\n\t\t\tstate.initialized = action.payload.init\r\n\t\t}\r\n\t}\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n//action\r\nexport const {setStatusAC, setErrorAC, setAppInitializedAC} = slice.actions\r\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n\tisLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n\tname: 'auth',\r\n\tinitialState: initialState,\r\n\treducers: {\r\n\t\tsetIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n\t\t\tstate.isLoggedIn = action.payload.value\r\n\t\t}\r\n\t}\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\n//action\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {todolistsReducer} from './reducers/todolists/todolists-reducer'\r\nimport {tasksReducer} from './reducers/tasks/tasks-reducer'\r\nimport {appReducer} from './reducers/app/app-reducer'\r\nimport {authReducer} from './reducers/auth/auth-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodolists: todolistsReducer,\r\n\ttasks: tasksReducer,\r\n\tapp: appReducer,\r\n\tauth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n\treducer: rootReducer,\r\n\tmiddleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","export type TaskPropsType = {\r\n\ttask: TaskType\r\n\ttodolistId: string\r\n\tchangeTaskStatus: (tasksId: string, status: TaskStatuses, todoListsId: string) => void // меняет галку таски\r\n\tchangeTaskTitle: (tasksId: string, tasksTitle: string, todoListsId: string) => void   // меняет название таски\r\n\tremoveTask: (todoListsId: string, tasksId: string,) => void // удаление тасок происходит только по id и типу string. принимает айдишник и ничего не возращает\r\n}\r\n\r\nexport type TaskType = {\r\n\tid: string\r\n\ttodoListId: string\r\n\ttitle: string\r\n\tstatus: TaskStatuses\r\n\tpriority: TaskPriorities\r\n\tcompleted: boolean\r\n\tdescription: string\r\n\tstartDate: string\r\n\tdeadline: string\r\n\torder: number\r\n\taddedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n\ttitle: string,\r\n\tdescription: string,\r\n\tstatus: TaskStatuses,\r\n\tcompleted: boolean,\r\n\tpriority: TaskPriorities,\r\n\tstartDate: string,\r\n\tdeadline: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n\tNew = 0,\r\n\tInProgress = 1,\r\n\tCompleted = 2,\r\n\tDraft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n\tLow = 0,\r\n\tMiddle = 1,\r\n\tHigh = 2,\r\n\tUrgent = 3,\r\n\tLater = 4\r\n}\r\n\r\nexport type ResponseTasksType<D = {}> = {\r\n\terror: string | null\r\n\ttotalCount: number\r\n\tdata: D\r\n\titems: TaskType []\r\n\tmessages: string\r\n\tresultCode: number\r\n}\r\n\r\nexport type UpdateDomainTaskType = {\r\n\ttitle?: string,\r\n\tdescription?: string,\r\n\tstatus?: TaskStatuses,\r\n\tpriority?: TaskPriorities,\r\n\tstartDate?: string,\r\n\tdeadline?: string\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\nimport {AddNewItemPropsType} from '../../../utilities/types/generic-componets/gen-types'\r\n\r\nexport const AddNewItemComponent = React.memo(({addNewItem, disabled}: AddNewItemPropsType) => {\r\n\tconsole.log('AddNewItemComponent render')\r\n\r\n\tconst [addNewTitle, setAddNewTitle] = useState('')\r\n\tconst [error, setError] = useState<string | null>(null)\r\n\r\n\tconst addNewTask = () => {\r\n\t\tif (addNewTitle.trim() !== '') {\r\n\t\t\taddNewItem(addNewTitle)\r\n\t\t\tsetAddNewTitle('')\r\n\t\t} else {\r\n\t\t\tsetError('Title is required')\r\n\t\t}\r\n\t}\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetAddNewTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (error !== null) {\r\n\t\t\tsetError(null)\r\n\t\t}\r\n\t\tif (e.charCode === 13) {\r\n\t\t\taddNewTask()\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField\r\n\t\t\t\tvariant={'outlined'}\r\n\t\t\t\terror={!!error}\r\n\t\t\t\tvalue={addNewTitle}\r\n\t\t\t\tonChange={onChangeHandler}\r\n\t\t\t\tonKeyPress={onKeyPressHandler}\r\n\t\t\t\tlabel={'Enter text'}\r\n\t\t\t\thelperText={error}\r\n\t\t\t\tdisabled={disabled}\r\n\t\t\t/>\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={addNewTask}\r\n\t\t\t\tcolor={'primary'}\r\n\t\t\t\tdisabled={disabled}>\r\n\r\n\t\t\t\t<AddBox/>\r\n\r\n\t\t\t</IconButton>\r\n\t\t</div>\r\n\t)\r\n})","import React, {ChangeEvent, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\nimport {ChangeTitleNamePropsType} from '../../../utilities/types/generic-componets/gen-types'\r\n\r\nexport const ChangeTitleNameComponent = React.memo((props: ChangeTitleNamePropsType) => {\r\n\r\n\tconsole.log('ChangeTitleNameComponent render')\r\n\r\n\tlet [editModeHook, setEditModeHook] = useState(false)\r\n\tlet [titleChangeNameHook, setTitleChangeNameHook] = useState('')\r\n\r\n\tconst activateEditMode = () => {\r\n\t\tsetEditModeHook(true)\r\n\t\tsetTitleChangeNameHook(props.changeTitleValue)\r\n\t}\r\n\tconst activateViewMode = () => {\r\n\t\tsetEditModeHook(false)\r\n\t\tprops.onChange(titleChangeNameHook)\r\n\t}\r\n\r\n\tconst onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitleChangeNameHook(e.currentTarget.value)\r\n\t}\r\n\r\n\treturn (\r\n\t\teditModeHook ? <TextField\r\n\t\t\tvalue={titleChangeNameHook}\r\n\t\t\tonBlur={activateViewMode}\r\n\t\t\tautoFocus\r\n\t\t\tonChange={onChangeTitleHandler}/> : <span onDoubleClick={activateEditMode}>\r\n\t\t\t{props.changeTitleValue}\r\n\t\t</span>\r\n\t)\r\n})","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {ChangeTitleNameComponent} from '../../../generic-components/change-title-item/ChangeTitleNameComponent'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskPropsType, TaskStatuses} from '../../../../utilities/types/todolists/tasks/tasks-type'\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n\tconst onClickHandler = () => {\r\n\t\treturn props.removeTask(props.task.id, props.todolistId)\r\n\t}\r\n\r\n\tconst onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tlet newIsDoneValue = e.currentTarget.checked\r\n\t\tprops.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n\t}\r\n\r\n\tconst onChangeTitle = useCallback((newItemValue: string) => {\r\n\t\tprops.changeTaskTitle(props.task.id, newItemValue, props.todolistId)\r\n\t}, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n\treturn (\r\n\t\t<li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n\t\t\t<Checkbox\r\n\t\t\t\tcolor={'primary'}\r\n\t\t\t\tonChange={onChangeStatus}\r\n\t\t\t\tchecked={props.task.status === TaskStatuses.Completed}/>\r\n\t\t\t<ChangeTitleNameComponent\r\n\t\t\t\tchangeTitleValue={props.task.title}\r\n\t\t\t\tonChange={onChangeTitle}\r\n\t\t\t/>\r\n\t\t\t<IconButton onClick={onClickHandler}>\r\n\t\t\t\t<Delete/>\r\n\t\t\t</IconButton>\r\n\t\t</li>)\r\n})","import axios from 'axios'\r\n\r\nexport const settings = {\r\n\twithCredentials: true,\r\n\theaders: {\r\n\t\t'API-KEY': 'b61c59bc-c21c-4a07-9ff4-5b299b2d5ced'\r\n\t}\r\n}\r\nexport const instance = axios.create({\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n\t...settings\r\n})","import {instance} from '../../utilities/settings-query-api/setting-api'\r\nimport {ResponseTasksType, TaskType, UpdateTaskModelType} from '../../utilities/types/todolists/tasks/tasks-type'\r\n\r\nexport const tasksAPI = {\r\n\tgetTasks(todolistId: string) {\r\n\t\treturn instance.get <ResponseTasksType>(`todo-lists/${todolistId}/tasks`)\r\n\t},\r\n\tcreateTask(newTitle: string, todolistId: string) {\r\n\t\treturn instance.post <ResponseTasksType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: newTitle})\r\n\t},\r\n\tdeleteTask(taskId: string, todolistId: string) {\r\n\t\treturn instance.delete <ResponseTasksType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n\t},\r\n\tupdateTaskTitle(taskId: string, status: UpdateTaskModelType, todolistId: string,) {\r\n\t\treturn instance.put <ResponseTasksType>(`todo-lists/${todolistId}/tasks/${taskId}`, status)\r\n\t}\r\n}","import {setErrorAC, setStatusAC} from '../../reducers/app/app-reducer'\r\nimport {Dispatch} from 'redux'\r\nimport {ResponseTasksType} from '../../../utilities/types/todolists/tasks/tasks-type'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseTasksType<D>, dispatch: Dispatch) => {\r\n\tif (data.messages.length) {\r\n\t\tdispatch(setErrorAC({error: data.messages[0]}))\r\n\t} else {\r\n\t\tdispatch(setErrorAC({error: 'some error'}))\r\n\t}\r\n\tdispatch(setStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch) => {\r\n\tdispatch(setErrorAC(error.message ? error.message : 'some error occurred'))\r\n\tdispatch(setStatusAC({status: 'succeeded'}))\r\n}\r\n\r\n\r\n","import {setStatusAC} from '../../reducers/app/app-reducer'\r\nimport {tasksAPI} from '../../../api/tasks/tasks-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../handle-error/HandleErrorUtils'\r\nimport {addTasksAC, removeTasksAC, setTasksAC, updateTaskAC} from '../../reducers/tasks/tasks-reducer'\r\n\r\nimport {RootStateType} from '../../store'\r\nimport {Dispatch} from 'redux'\r\nimport {UpdateDomainTaskType, UpdateTaskModelType} from '../../../utilities/types/todolists/tasks/tasks-type'\r\n\r\nexport const getTasksThunkCreator = (todolistId: string) => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\tdispatch(setStatusAC({status: 'loading'}))\r\n\t\ttasksAPI.getTasks(todolistId)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tdispatch(setTasksAC({tasks: res.data.items, todolistId}))\r\n\t\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t\t})\r\n\t}\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setStatusAC({status: 'loading'}))\r\n\ttasksAPI.deleteTask(taskId, todolistId)\r\n\t\t.then(() => {\r\n\t\t\tdispatch(removeTasksAC({taskId, todolistId}))\r\n\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\nexport const addTasksTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setStatusAC({status: 'loading'}))\r\n\ttasksAPI.createTask(todolistId, title)\r\n\t\t.then(res => {\r\n\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\tdispatch(addTasksAC({task: res.data.data.item}))\r\n\t\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t\t} else {\r\n\t\t\t\thandleServerAppError(res.data, dispatch)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t\t}\r\n\t\t)\r\n}\r\nexport const changeTaskStatusTC = (taskId: string, domainModel: UpdateDomainTaskType, todolistId: string) =>\r\n\t(dispatch: Dispatch, getState: () => RootStateType) => {\r\n\t\tconst task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n\t\tif (task) {\r\n\t\t\tconst apiModel: UpdateTaskModelType = {\r\n\t\t\t\ttitle: task.title,\r\n\t\t\t\tdescription: task.description,\r\n\t\t\t\tstatus: task.status,\r\n\t\t\t\tcompleted: task.completed,\r\n\t\t\t\tpriority: task.priority,\r\n\t\t\t\tstartDate: task.startDate,\r\n\t\t\t\tdeadline: task.deadline,\r\n\t\t\t\t...domainModel\r\n\t\t\t}\r\n\r\n\t\t\tdispatch(setStatusAC({status: 'loading'}))\r\n\t\t\ttasksAPI.updateTaskTitle(taskId, apiModel, todolistId)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\t\t\tdispatch(updateTaskAC({taskId, model: domainModel, todolistId}))\r\n\t\t\t\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\thandleServerAppError(res.data, dispatch)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t\t\t})\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddNewItemComponent} from '../../generic-components/add-new-item/AddNewItemComponent'\r\nimport {ChangeTitleNameComponent} from '../../generic-components/change-title-item/ChangeTitleNameComponent'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './task/Task'\r\nimport {useDispatch} from 'react-redux'\r\nimport {getTasksThunkCreator} from '../../../store/thunk/tasks/tasks-thunks'\r\nimport {TodolistPropsType} from '../../../utilities/types/todolists/todolists-types'\r\nimport {TaskStatuses} from '../../../utilities/types/todolists/tasks/tasks-type'\r\n\r\nexport const TodoList = React.memo(function ({demo = false, ...props}: TodolistPropsType) {\r\n\tconsole.log(' TodoList render')\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (demo) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconsole.log('log  ' + props.todolist.id)\r\n\t\tdispatch(getTasksThunkCreator(props.todolist.id))\r\n\t}, [])\r\n\r\n\r\n\tconst addNewTask = useCallback((title: string) => {\r\n\t\tprops.addNewTask(title, props.todolist.id)\r\n\t}, [props.addNewTask, props.todolist.id])\r\n\r\n\r\n\tconst onClickAllButton = useCallback(() => {\r\n\t\tprops.changeFilterTodoist(props.todolist.id, 'All')\r\n\t}, [props.changeFilterTodoist, props.todolist.id])\r\n\tconst onClickActiveButton = useCallback(() => {\r\n\t\tprops.changeFilterTodoist(props.todolist.id, 'Active')\r\n\t}, [props.changeFilterTodoist, props.todolist.id])\r\n\tconst onClickComletedButton = useCallback(() => {\r\n\t\tprops.changeFilterTodoist(props.todolist.id, 'Completed')\r\n\t}, [props.changeFilterTodoist, props.todolist.id])\r\n\r\n\r\n\tconst removeTodoListCallBack = () => {\r\n\t\tprops.removeTodoList(props.todolist.id)\r\n\t}\r\n\r\n\tconst changeTodoListTitleCallBack = useCallback((newChangeTitleValue: string) => {\r\n\t\tprops.changeTodoListTitle(props.todolist.id, newChangeTitleValue)\r\n\t}, [props.changeTodoListTitle, props.todolist.id])\r\n\r\n\tlet tasksForTodoList = props.tasks\r\n\tif (props.todolist.filter === 'Active') {\r\n\t\ttasksForTodoList.filter(t => t.status === TaskStatuses.New)\r\n\t}\r\n\tif (props.todolist.filter === 'Completed') {\r\n\t\ttasksForTodoList.filter(t => t.status === TaskStatuses.Completed)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3>\r\n\t\t\t\t<ChangeTitleNameComponent\r\n\t\t\t\t\tchangeTitleValue={props.todolist.title}\r\n\t\t\t\t\tonChange={changeTodoListTitleCallBack}\r\n\t\t\t\t/>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\tonClick={removeTodoListCallBack}\r\n\t\t\t\t\tdisabled={props.todolist.entityStatus === 'loading'}>\r\n\t\t\t\t\t<Delete/>\r\n\t\t\t\t</IconButton>\r\n\t\t\t</h3>\r\n\r\n\t\t\t<AddNewItemComponent\r\n\t\t\t\taddNewItem={addNewTask}\r\n\t\t\t\tdisabled={props.todolist.entityStatus === 'loading'}/>\r\n\t\t\t<ul>\r\n\t\t\t\t{props.tasks.map((t) => <Task\r\n\t\t\t\t\ttask={t}\r\n\t\t\t\t\tchangeTaskStatus={props.changeTaskStatus}\r\n\t\t\t\t\tchangeTaskTitle={props.changeTaskTitle}\r\n\t\t\t\t\tremoveTask={props.removeTask}\r\n\t\t\t\t\ttodolistId={props.todolist.id}\r\n\t\t\t\t\tkey={t.id}\r\n\t\t\t\t/>)\r\n\t\t\t\t}\r\n\t\t\t</ul>\r\n\t\t\t<div>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant={props.todolist.filter === 'All' ? 'contained' : 'text'}\r\n\t\t\t\t\tonClick={onClickAllButton}\r\n\t\t\t\t\tcolor={'inherit'}>All</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant={props.todolist.filter === 'Active' ? 'contained' : 'text'}\r\n\t\t\t\t\tonClick={onClickActiveButton}\r\n\t\t\t\t\tcolor={'primary'}>Active</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant={props.todolist.filter === 'Completed' ? 'contained' : 'text'}\r\n\t\t\t\t\tonClick={onClickComletedButton}\r\n\t\t\t\t\tcolor={'secondary'}>Completed</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\n\r\n","import {instance} from '../../utilities/settings-query-api/setting-api'\r\nimport {TodolistType} from '../../utilities/types/todolists/todolists-types'\r\nimport {ResponseType} from '../../utilities/types/api/api-types'\r\n\r\nexport const todolistsAPI = {\r\n\tgetTodolists() {\r\n\t\treturn instance.get <Array<TodolistType>>(`todo-lists`)\r\n\t},\r\n\tcreateTodolists(title: string) {\r\n\t\treturn instance.post <ResponseType<{ item: TodolistType }>>(`todo-lists`, {title: title})\r\n\t},\r\n\tdeleteTodolists(todolistId: string) {\r\n\t\treturn instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n\t},\r\n\tupdateTodolistsTitle(todolistId: string, updateTitle: string) {\r\n\t\treturn instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: updateTitle})\r\n\t}\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddNewItemComponent} from '../generic-components/add-new-item/AddNewItemComponent'\r\nimport {TodoList} from './todolist/Todolist'\r\nimport {changeTodoListFilterAC} from '../../store/reducers/todolists/todolists-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {addTasksTC, changeTaskStatusTC, removeTaskTC} from '../../store/thunk/tasks/tasks-thunks'\r\nimport {\r\n\taddTodolistsTC, changeTodoTitleTC,\r\n\tfetchTodolistsThunkCreator, removeTodolistsTC\r\n} from '../../store/thunk/todolists/todolist-thunks'\r\n\r\nimport {RootStateType} from '../../store/store'\r\nimport {AppTasksType} from '../../utilities/types/app/app-types'\r\nimport {\r\n\tFilterValuesType, TodolistsListPropsType,\r\n\tTodolistsReducerType\r\n} from '../../utilities/types/todolists/todolists-types'\r\nimport {TaskStatuses} from '../../utilities/types/todolists/tasks/tasks-type'\r\n\r\nexport const Todolists: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst todolists = useSelector<RootStateType, Array<TodolistsReducerType>>(state => state.todolists)\r\n\tconst tasks = useSelector<RootStateType, AppTasksType>(state => state.tasks)\r\n\tconst isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (demo || !isLoggedIn) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(fetchTodolistsThunkCreator())\r\n\t}, [isLoggedIn])\r\n\r\n\r\n\tconst removeTask = useCallback((taskId: string, todolistId: string) => {\r\n\t\tdispatch(removeTaskTC(taskId, todolistId))\r\n\t}, [])\r\n\r\n\tconst addNewTask = useCallback((tasksNewTitleInput: string, todoListId: string) => {\r\n\t\tdispatch(addTasksTC(tasksNewTitleInput, todoListId))\r\n\t}, [])\r\n\r\n\tconst changeTaskStatus = useCallback((tasksId: string, status: TaskStatuses, todoListsId: string) => {\r\n\t\tdispatch(changeTaskStatusTC(tasksId, {status}, todoListsId))\r\n\t}, [])\r\n\r\n\tconst changeTaskTitle = useCallback((tasksId: string, tasksTitle: string, todoListsId: string) => {\r\n\t\tdispatch(changeTaskStatusTC(tasksId, {title: tasksTitle}, todoListsId))\r\n\t}, [])\r\n\r\n\r\n\tconst changeFilterTodolist = useCallback((id: string, filterValue: FilterValuesType) => {\r\n\t\tdispatch(changeTodoListFilterAC({id, filterValue}))\r\n\t}, [])\r\n\r\n\tconst removeTodoList = useCallback((todoListsId: string) => {\r\n\t\tdispatch(removeTodolistsTC(todoListsId))\r\n\t}, [])\r\n\r\n\tconst changeTodoListTitle = useCallback((todoListsId: string, newChangeTitleValue: string) => {\r\n\t\tdispatch(changeTodoTitleTC(todoListsId, newChangeTitleValue))\r\n\t}, [])\r\n\r\n\tconst addNewTodoList = useCallback((title: string) => {\r\n\t\tdispatch(addTodolistsTC(title))\r\n\t}, [])\r\n\r\n\tif (!isLoggedIn) return <Redirect to={'/auth'}/>\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Grid container style={{padding: '20px'}}>\r\n\t\t\t\t<AddNewItemComponent addNewItem={addNewTodoList}/>\r\n\t\t\t</Grid>\r\n\r\n\t\t\t<Grid container spacing={3}>\r\n\r\n\t\t\t\t{todolists.map(tl => {\r\n\r\n\t\t\t\t\tlet allTodolistTasks = tasks[tl.id]\r\n\t\t\t\t\tlet tasksForTodoList = allTodolistTasks\r\n\r\n\t\t\t\t\tif (tl.filter === 'Active') {\r\n\t\t\t\t\t\ttasksForTodoList = allTodolistTasks.filter(t => t.status === TaskStatuses.New)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tl.filter === 'Completed') {\r\n\t\t\t\t\t\ttasksForTodoList = allTodolistTasks.filter(t => t.status === TaskStatuses.Completed)\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t<Paper style={{padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<TodoList\r\n\t\t\t\t\t\t\t\t\tkey={tl.id}\r\n\t\t\t\t\t\t\t\t\ttodolist={tl}\r\n\t\t\t\t\t\t\t\t\ttasks={tasksForTodoList}\r\n\t\t\t\t\t\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\t\t\t\t\t\tchangeFilterTodoist={changeFilterTodolist}\r\n\t\t\t\t\t\t\t\t\taddNewTask={addNewTask}\r\n\t\t\t\t\t\t\t\t\tchangeTaskStatus={changeTaskStatus}\r\n\t\t\t\t\t\t\t\t\tchangeTaskTitle={changeTaskTitle}\r\n\t\t\t\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\t\t\t\tchangeTodoListTitle={changeTodoListTitle}\r\n\t\t\t\t\t\t\t\t\tdemo={demo}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Grid>\r\n\t\t</>\r\n\t)\r\n}","import {setStatusAC} from '../../reducers/app/app-reducer'\r\nimport {todolistsAPI} from '../../../api/todolist/todolists-api'\r\nimport {handleServerNetworkError} from '../handle-error/HandleErrorUtils'\r\nimport {\r\n\taddTodolistAC, changeTodolistEntityStatusAC,\r\n\tchangeTodoTitleAC, removeTodolistAC, setTodolistsAC\r\n} from '../../reducers/todolists/todolists-reducer'\r\n\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const fetchTodolistsThunkCreator = () => (dispatch: Dispatch) => {\r\n\tdispatch(setStatusAC({status: 'loading'}))\r\n\ttodolistsAPI.getTodolists()\r\n\t\t.then((res) => {\r\n\t\t\tdispatch(setTodolistsAC({todolists: res.data}))\r\n\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\nexport const removeTodolistsTC = (id: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setStatusAC({status: 'loading'}))\r\n\tdispatch(changeTodolistEntityStatusAC({id, status: 'loading'}))\r\n\ttodolistsAPI.deleteTodolists(id)\r\n\t\t.then(() => {\r\n\t\t\t\tdispatch(removeTodolistAC({id}))\r\n\t\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t\t}\r\n\t\t)\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\nexport const addTodolistsTC = (title: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setStatusAC({status: 'loading'}))\r\n\ttodolistsAPI.createTodolists(title)\r\n\t\t.then((res) => {\r\n\t\t\tdispatch(addTodolistAC({todolist: res.data.data.item}))\r\n\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n\r\n}\r\nexport const changeTodoTitleTC = (id: string, changeTitle: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setStatusAC({status: 'loading'}))\r\n\ttodolistsAPI.updateTodolistsTitle(id, changeTitle)\r\n\t\t.then(() => {\r\n\t\t\t\tdispatch(changeTodoTitleAC({id, changeTitle}))\r\n\t\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t\t}\r\n\t\t)\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\n\r\n\r\n","import {instance} from '../../utilities/settings-query-api/setting-api'\r\nimport {LoginParametersType} from '../../utilities/types/login/login-types'\r\nimport {ResponseType} from '../../utilities/types/api/api-types'\r\n\r\nexport const loginApi = {\r\n\tlogin(data: LoginParametersType) {\r\n\t\treturn instance.post <ResponseType<{ userId?: number }>>(`auth/login`, data)\r\n\t},\r\n\tgetStatusMe() {\r\n\t\treturn instance.get <ResponseType<{ id: number, email: string, login: string }>>(`auth/me`)\r\n\t},\r\n\tlogOut() {\r\n\t\treturn instance.delete <ResponseType>(`auth/login`)\r\n\t}\r\n}","import React from 'react'\r\nimport {\r\n\tCheckbox, FormControlLabel, FormGroup, TextField,\r\n\tButton, FormControl, FormLabel, Grid\r\n} from '@material-ui/core'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {useFormik} from 'formik'\r\nimport {loginTC} from '../../store/thunk/auth/auth-thunks'\r\n\r\nimport {RootStateType} from '../../store/store'\r\n\r\nexport const Login = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst isLoggedIn = useSelector<RootStateType>(state => state.auth.isLoggedIn)\r\n\r\n\tconst validate = (values: any) => {\r\n\t\tconst errors = {\r\n\t\t\temail: '',\r\n\t\t\tpassword: ''\r\n\t\t}\r\n\t\tif (!values.email) {\r\n\t\t\terrors.email = 'Email address is required'\r\n\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\terrors.email = 'Don\\'t forget @ and enter domain data '\r\n\t\t}\r\n\r\n\t\tif (!values.password) {\r\n\t\t\terrors.password = 'Password is required'\r\n\t\t} else if (values.password) {\r\n\t\t\terrors.password = ''\r\n\t\t}\r\n\t}\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate,\r\n\t\tonSubmit: values => {\r\n\t\t\tdebugger\r\n\t\t\tdispatch(loginTC(values))\r\n\t\t}\r\n\t})\r\n\r\n\tif (isLoggedIn) {\r\n\t\treturn <Redirect to={'/'}/>\r\n\t}\r\n\r\n\treturn <Grid container justify=\"center\">\r\n\t\t<Grid item xs={4}>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<FormControl>\r\n\t\t\t\t\t<FormLabel>\r\n\t\t\t\t\t\t<p>Email: free@samuraijs.com</p>\r\n\t\t\t\t\t\t<p>Password: free</p>\r\n\t\t\t\t\t</FormLabel>\r\n\t\t\t\t\t<FormGroup>\r\n\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tlabel={'Remember me'}\r\n\t\t\t\t\t\t\tcontrol={<Checkbox/>}\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ttype={'submit'}\r\n\t\t\t\t\t\t\tvariant={'contained'}\r\n\t\t\t\t\t\t\tcolor={'primary'}>Login</Button>\r\n\t\t\t\t\t</FormGroup>\r\n\t\t\t\t</FormControl>\r\n\t\t\t</form>\r\n\t\t</Grid>\r\n\t</Grid>\r\n}\r\n","import {setStatusAC} from '../../reducers/app/app-reducer'\r\nimport {loginApi} from '../../../api/login/login-api'\r\nimport {setIsLoggedInAC} from '../../reducers/auth/auth-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../handle-error/HandleErrorUtils'\r\n\r\nimport {Dispatch} from 'redux'\r\nimport {LoginParametersType} from '../../../utilities/types/login/login-types'\r\n\r\nexport const loginTC = (data: LoginParametersType) => (dispatch: Dispatch) => {\r\n\tdispatch(setStatusAC({status: 'loading'}))\r\n\tloginApi.login(data).then(res => {\r\n\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\tdispatch(setIsLoggedInAC({value: true}))\r\n\t\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t\t} else {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\thandleServerAppError(res.data, dispatch)\r\n\t\t\t}\r\n\t\t}\r\n\t).catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n\tdispatch(setStatusAC({status: 'loading'}))\r\n\tloginApi.logOut().then(res => {\r\n\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\tdispatch(setIsLoggedInAC({value: false}))\r\n\t\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t\t} else {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\thandleServerAppError(res.data, dispatch)\r\n\t\t\t}\r\n\t\t}\r\n\t).catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t}\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {setErrorAC} from '../../../store/reducers/app/app-reducer'\r\nimport {RootStateType} from '../../../store/store'\r\n\r\nconst Alert = (props: AlertProps) => {\r\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackBar = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\t\tif (reason === 'clickaway') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(setErrorAC({error: null}))\r\n\t}\r\n\r\n\tconst error = useSelector<RootStateType, string | null>(state => state.app.error)\r\n\r\n\tconst isOpen = error !== null\r\n\r\n\treturn (\r\n\t\t<Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n\t\t\t<Alert onClose={handleClose} severity=\"error\">\r\n\t\t\t\t{error}\r\n\t\t\t</Alert>\r\n\t\t</Snackbar>\r\n\t)\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {\r\n\tAppBar, CircularProgress, LinearProgress,\r\n\tButton, Container, IconButton, Toolbar, Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {Todolists} from '../todolists-lists/Todolists'\r\nimport {Login} from '../auth/Login'\r\nimport {ErrorSnackBar} from '../generic-components/error-snackbar/ErrorSnackBar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {initializedAppTC} from '../../store/thunk/app/app-thunks'\r\nimport {logoutTC} from '../../store/thunk/auth/auth-thunks'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\n\r\nimport {RootStateType} from '../../store/store'\r\nimport {AppPropsType} from '../../utilities/types/app/app-types'\r\nimport {RequestStatusType} from '../../utilities/types/error-status/err-st-types'\r\n\r\nexport const App = ({demo = false}: AppPropsType) => {\r\n\tconsole.log('App render')\r\n\r\n\tconst status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\r\n\tconst initialized = useSelector<RootStateType, boolean>(state => state.app.initialized)\r\n\tconst isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(initializedAppTC())\r\n\t}, [initialized])\r\n\r\n\tconst logoutHandler = useCallback(() => {\r\n\t\tdispatch(logoutTC())\r\n\t}, [])\r\n\r\n\r\n\tif (!initialized) {\r\n\t\treturn <div style={{position: 'fixed', top: '50%', textAlign: 'center', width: '100%'}}>\r\n\t\t\t<CircularProgress/>\r\n\t\t</div>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<div className={'App'}>\r\n\t\t\t\t<ErrorSnackBar/>\r\n\t\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\tedge=\"start\"\r\n\t\t\t\t\t\t\tcolor=\"inherit\"\r\n\t\t\t\t\t\t\taria-label=\"menu\">\r\n\t\t\t\t\t\t\t<Menu/>\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\tTodolist APP\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t{isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t\t{status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n\t\t\t\t</AppBar>\r\n\t\t\t\t<Container fixed>\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\tpath={'/'}\r\n\t\t\t\t\t\trender={() => <Todolists demo={demo}/>}/>\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\texact path={'/auth'}\r\n\t\t\t\t\t\trender={() => <Login/>}/>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t</BrowserRouter>\r\n\t)\r\n}\r\n","import {loginApi} from '../../../api/login/login-api'\r\nimport {setIsLoggedInAC} from '../../reducers/auth/auth-reducer'\r\nimport {setAppInitializedAC, setStatusAC} from '../../reducers/app/app-reducer'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n\tloginApi.getStatusMe().then(res => {\r\n\t\tif (res.data.resultCode === 0) {\r\n\t\t\tdispatch(setIsLoggedInAC({value: true}))\r\n\t\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t\t}\r\n\t\tdispatch(setAppInitializedAC({init: true}))\r\n\t\tdispatch(setStatusAC({status: 'succeeded'}))\r\n\t})\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport {Provider} from 'react-redux'\r\nimport {store} from './store/store'\r\nimport {App} from './components/app/App'\r\n\r\nimport './styles/index.css'\r\n\r\nReactDOM.render(\r\n\t<Provider store={store} >\r\n\t\t<App />\r\n\t</Provider>, document.getElementById('root'))\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}