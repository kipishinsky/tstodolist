{"version":3,"sources":["serviceWorker.ts","api/tasks/tasks-api.ts","api/todolist/todolists-api.ts","api/login/login-api.ts","utils/HandleErrorUtils.ts","components/login/auth-reducer.ts","components/app/app-reducer.ts","components/todolists-lists/todolist/todolists-reducer/todolists-reducer.ts","components/todolists-lists/todolist/tasks-reducer/tasks-reducer.ts","components/app/store.ts","components/add-new-item/AddNewItemComponent.tsx","components/change-title-item/ChangeTitleNameComponent.tsx","components/todolists-lists/todolist/tasks/Task.tsx","components/todolists-lists/todolist/Todolist.tsx","components/todolists-lists/TodolistsList.tsx","components/error-snackbar/ErrorSnackBar.tsx","components/login/Login.tsx","components/app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","updateTitle","put","loginApi","data","handleServerAppError","dispatch","messages","length","setErrorAC","setStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","initialized","tasksAPI","newTitle","taskId","changeTaskStatusTC","domainModel","getState","task","tasks","find","t","id","apiModel","description","completed","priority","startDate","deadline","then","res","resultCode","model","updateTaskAC","catch","rootReducer","combineReducers","todolists","state","action","filter","st","idAC","todolist","entityStatus","map","tl","titleAC","filterAC","todoListId","newTitleTask","copyState","forEach","app","init","auth","store","createStore","applyMiddleware","thunkMiddleware","AddNewItemComponent","React","memo","addNewItem","disabled","console","log","useState","addNewTitle","setAddNewTitle","setError","addNewTask","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","onClick","color","AddBox","ChangeTitleNameComponent","props","editModeHook","setEditModeHook","titleChangeNameHook","setTitleChangeNameHook","onBlur","autoFocus","onDoubleClick","changeTitleValue","Task","onChangeTitle","useCallback","newItemValue","changeTaskTitle","key","className","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","removeTask","Delete","TodoList","demo","useDispatch","useEffect","setTasksAC","items","onClickAllButton","changeFilter","onClickActiveButton","onClickComletedButton","changeTodoListTitleCallBack","newChangeTitleValue","changeTodoListTitle","removeTodoList","Button","TodolistsList","useSelector","removeTasksAC","removeTaskTC","tasksNewTitleInput","item","tasksId","todoListsId","tasksTitle","changeFilterTodolist","filterValue","changeTodoListFilterAC","removeTodolistAC","changeTitle","changeTodoTitleAC","addNewTodoList","addTodolistsTC","Grid","container","style","padding","spacing","allTodolistTasks","tasksForTodoList","Paper","to","Alert","elevation","ErrorSnackBar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","render","exact","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17013312.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst settings = {\r\n\twithCredentials: true,\r\n\theaders: {\r\n\t\t'API-KEY': 'b61c59bc-c21c-4a07-9ff4-5b299b2d5ced'\r\n\t}\r\n}\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n\t...settings\r\n})\r\n\r\n//api\r\nexport const tasksAPI = {\r\n\r\n\tgetTasks(todolistId: string) {\r\n\t\treturn instance.get < ResponseTasksType > (`todo-lists/${todolistId}/tasks`)\r\n\t},\r\n\tcreateTask(newTitle: string, todolistId: string) {\r\n\t\treturn instance.post < ResponseTasksType<{item:TaskType}> > (`todo-lists/${todolistId}/tasks`, {title: newTitle})\r\n\t},\r\n\tdeleteTask(taskId: string, todolistId: string ) {\r\n\t\treturn instance.delete < ResponseTasksType > (`todo-lists/${todolistId}/tasks/${taskId}`)\r\n\t},\r\n\tupdateTaskTitle(taskId: string, status: UpdateTaskModelType, todolistId: string,) {\r\n\t\treturn instance.put < ResponseTasksType > (`todo-lists/${todolistId}/tasks/${taskId}`, status)\r\n\t}\r\n}\r\n\r\n//types\r\nexport type TaskType = {\r\n\tid: string\r\n\ttodoListId: string\r\n\ttitle: string\r\n\tstatus: TaskStatuses\r\n\tpriority: TaskPriorities\r\n\tcompleted: boolean\r\n\tdescription: string\r\n\tstartDate: string\r\n\tdeadline: string\r\n\torder: number\r\n\taddedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n\ttitle: string,\r\n\tdescription: string,\r\n\tstatus: TaskStatuses,\r\n\tcompleted: boolean,\r\n\tpriority: TaskPriorities,\r\n\tstartDate: string,\r\n\tdeadline: string\r\n}\r\nexport enum TaskStatuses {\r\n\tNew = 0,\r\n\tInProgress = 1,\r\n\tCompleted = 2,\r\n\tDraft = 3\r\n}\r\nexport enum TaskPriorities {\r\n\tLow = 0,\r\n\tMiddle = 1,\r\n\tHigh = 2,\r\n\tUrgent = 3,\r\n\tLater = 4\r\n}\r\nexport type ResponseTasksType<D={}> = {\r\n\terror: string | null\r\n\ttotalCount: number\r\n\tdata: D\r\n\titems: TaskType [] // Array<TaskType>,\r\n\tmessages: string,\r\n\tresultCode: number\r\n}","import axios from \"axios\";\r\nimport {FilterValuesType} from \"../../components/todolists-lists/todolist/todolists-reducer/todolists-reducer\";\r\n\r\nconst settings = {\r\n\twithCredentials: true,\r\n\theaders: {\r\n\t\t'API-KEY': 'b61c59bc-c21c-4a07-9ff4-5b299b2d5ced'\r\n\t}\r\n}\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n\t...settings\r\n})\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n\r\n\tgetTodolists(){\r\n\t\treturn instance.get <Array <TodolistType> >(`todo-lists`)\r\n\t},\r\n\tcreateTodolists(title: string) {\r\n\t\treturn instance.post < ResponseTodolistType <{item: TodolistType}> >  (`todo-lists`, {title: title})\r\n\t},\r\n\tdeleteTodolists(todolistId: string) {\r\n\t\treturn instance.delete< ResponseTodolistType >(`todo-lists/${todolistId}`)\r\n\t},\r\n\tupdateTodolistsTitle(todolistId: string, updateTitle: string) {\r\n\t\treturn instance.put< ResponseTodolistType >(`todo-lists/${todolistId}`, {title: updateTitle})\r\n\t}\r\n}\r\n\r\n//types\r\nexport type TodolistType = {\r\n\tid: string\r\n\ttitle: string\r\n\tfilter: FilterValuesType\r\n\taddedDate: string\r\n\torder: number\r\n}\r\ntype ResponseTodolistType<D={}> = {\r\n\tresultCode: number\r\n\tmessages: Array<string>\r\n\tdata: D\r\n}\r\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n\twithCredentials: true,\r\n\theaders: {\r\n\t\t'API-KEY': 'b61c59bc-c21c-4a07-9ff4-5b299b2d5ced'\r\n\t}\r\n}\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n\t...settings\r\n})\r\n\r\n//api\r\nexport const loginApi = {\r\n\r\n\tcreateLogin(data: LoginParametersType) {\r\n\t\treturn instance.post <ResponseLoginType<{ userId?: number }>>(`auth/login`, data)\r\n\t},\r\n\tgetStatusMe() {\r\n\t\treturn instance.get <ResponseLoginType<{ id: number, email: string, login: string }>>(`auth/me`)\r\n\t},\r\n\tdeleteLogin() {\r\n\t\treturn instance.delete <ResponseLoginType>(`auth/login`)\r\n\t}\r\n}\r\n\r\n//types\r\n\r\nexport type LoginParametersType = {\r\n\temail: string,\r\n\tpassword: string,\r\n\trememberMe: boolean,\r\n\tcaptcha?: string | boolean\r\n}\r\nexport type ResponseLoginType<D = {}> = {\r\n\tresultCode: number,\r\n\tmessages: Array<string>,\r\n\tdata: D\r\n}","import {setErrorAC, SetErrorActionType, setStatusAC, SetStatusActionType} from '../components/app/app-reducer'\r\nimport {Dispatch} from 'redux'\r\nimport {ResponseTasksType} from '../api/tasks/tasks-api'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseTasksType<D>, dispatch: Dispatch<ThunkType>) => {\r\n\tif (data.messages.length) {\r\n\t\tdispatch(setErrorAC(data.messages[0]))\r\n\t} else {\r\n\t\tdispatch(setErrorAC('some error'))\r\n\t}\r\n\tdispatch(setStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch<ThunkType>) => {\r\n\tdispatch(setErrorAC(error.message ? error.message : 'some error occurred'))\r\n\tdispatch(setStatusAC('succeeded'))\r\n}\r\n\r\n\r\ntype ThunkType = SetErrorActionType | SetStatusActionType","import {Dispatch} from 'redux'\r\nimport {SetErrorActionType, setStatusAC, SetStatusActionType} from '../app/app-reducer'\r\nimport {loginApi, LoginParametersType} from '../../api/login/login-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/HandleErrorUtils'\r\n\r\nconst initialState: InitialStateType = {\r\n\tisLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'login/SET-IS-LOGGED-IN':\r\n\t\t\treturn {...state, isLoggedIn: action.value}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n\t({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParametersType) => (dispatch: Dispatch<ActionsType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\tloginApi.createLogin(data).then(res => {\r\n\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\tdispatch(setIsLoggedInAC(true))\r\n\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\thandleServerAppError(res.data, dispatch)\r\n\t\t\t}\r\n\t\t}\r\n\t).catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\tloginApi.deleteLogin().then(res => {\r\n\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\tdispatch(setIsLoggedInAC(false))\r\n\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\thandleServerAppError(res.data, dispatch)\r\n\t\t\t}\r\n\t\t}\r\n\t).catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t}\r\n\t)\r\n}\r\n\r\n// types\r\nexport type ActionsType = ReturnType<typeof setIsLoggedInAC> | SetStatusActionType | SetErrorActionType\r\nexport type InitialStateType = {\r\n\tisLoggedIn: boolean\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {loginApi} from '../../api/login/login-api'\r\nimport {setIsLoggedInAC} from '../login/auth-reducer'\r\n\r\nconst initialState: InitialStateType = {\r\n\tstatus: 'loading',\r\n\terror: null,\r\n\tinitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'APP/SET-STATUS':\r\n\t\t\treturn {...state, status: action.status}\r\n\t\tcase 'APP/SET-ERROR':\r\n\t\t\treturn {...state, error: action.error}\r\n\t\tcase 'APP/SET-INITIALIZED':\r\n\t\t\treturn {...state, initialized: action.init}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n//action\r\nexport const setStatusAC = (status: RequestStatusType) => ({\r\n\ttype: 'APP/SET-STATUS', status\r\n}) as const\r\nexport const setErrorAC = (error: string | null) => ({\r\n\ttype: 'APP/SET-ERROR', error\r\n}) as const\r\nexport const setAppInitializedAC = (init: boolean) => ({\r\n\ttype: 'APP/SET-INITIALIZED', init\r\n}) as const\r\n\r\n//thunk\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n\tloginApi.getStatusMe().then( res => {\r\n\t\tif(res.data.resultCode === 0) {\r\n\t\t\tdispatch(setIsLoggedInAC(true))\r\n\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t}\r\n\t\tdispatch(setAppInitializedAC(true))\r\n\t\tdispatch(setStatusAC('succeeded'))\r\n\t})\r\n}\r\n\r\nexport type SetErrorActionType = ReturnType<typeof setErrorAC>\r\nexport type SetStatusActionType = ReturnType<typeof setStatusAC>\r\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n\t// происходит ли сейчас взаимодействие с сервером\r\n\tstatus: RequestStatusType,\r\n\t// ошибку пишем сюда\r\n\terror: string | null,\r\n\t// проверяет логинизацию\r\n\tinitialized: boolean\r\n}\r\n\r\ntype ActionsType =\r\n\t| SetErrorActionType\r\n\t| SetStatusActionType\r\n\t| SetAppInitializedActionType\r\n","import {todolistsAPI, TodolistType} from '../../../../api/todolist/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n\tRequestStatusType,\r\n\tSetErrorActionType,\r\n\tsetStatusAC,\r\n\tSetStatusActionType\r\n} from '../../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../../../utils/HandleErrorUtils'\r\n\r\nconst initialState: Array<TodolistsReducerType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsReducerType> = initialState, action: ActionType): Array<TodolistsReducerType> => {\r\n\tswitch (action.type) {\r\n\t\tcase 'REMOVE-TODOLIST':\r\n\t\t\treturn state.filter(st => st.id !== action.idAC)\r\n\t\tcase 'ADD-TODOLIST':\r\n\t\t\treturn [...state, {...action.todolist, filter: 'All', entityStatus: 'idle'}]\r\n\t\tcase 'CHANGE-TODOLIST-TITLE':\r\n\t\t\treturn state.map(tl => tl.id === action.idAC ? {...tl, title: action.titleAC} : tl)\r\n\t\tcase 'CHANGE-TODOLIST-FILTER':\r\n\t\t\treturn state.map(tl => tl.id === action.idAC ? {...tl, filter: action.filterAC} : tl)\r\n\t\tcase 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n\t\t\treturn state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n\t\tcase 'SET-TODOLISTS':\r\n\t\t\treturn action.todolists.map(tl => ({...tl, filter: 'All', entityStatus: 'idle'}))\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', idAC: id}) as const\r\nexport const addTodolistAC = (todolist: TodolistType,) => ({type: 'ADD-TODOLIST', todolist}) as const\r\nexport const changeTodoTitleAC = (id: string, changeTitle: string) => ({\r\n\ttype: 'CHANGE-TODOLIST-TITLE',\r\n\tidAC: id,\r\n\ttitleAC: changeTitle,\r\n\tfilterAC: 'All'\r\n}) as const\r\nexport const changeTodoListFilterAC = (id: string, filterValue: FilterValuesType) => ({\r\n\ttype: 'CHANGE-TODOLIST-FILTER',\r\n\tfilterAC: filterValue,\r\n\tidAC: id\r\n}) as const\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists}) as const\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n\ttype: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n}) as const\r\n\r\n\r\n//thunks\r\nexport const fetchTodolistsThunkCreator = () => (dispatch: Dispatch<ThunkType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\ttodolistsAPI.getTodolists()\r\n\t\t.then((res) => {\r\n\t\t\tdispatch(setTodolistsAC(res.data))\r\n\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\nexport const removeTodolistsTC = (todolistId: string) => (dispatch: Dispatch<ThunkType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\tdispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n\ttodolistsAPI.deleteTodolists(todolistId)\r\n\t\t.then((res) => {\r\n\t\t\t\tdispatch(removeTodolistAC(todolistId))\r\n\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t}\r\n\t\t)\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\nexport const addTodolistsTC = (title: string) => (dispatch: Dispatch<ThunkType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\ttodolistsAPI.createTodolists(title)\r\n\t\t.then((res) => {\r\n\t\t\tdispatch(addTodolistAC(res.data.data.item))\r\n\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n\r\n}\r\nexport const changeTodoTitleTC = (id: string, changeTitle: string) => (dispatch: Dispatch<ThunkType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\ttodolistsAPI.updateTodolistsTitle(id, changeTitle)\r\n\t\t.then((res) => {\r\n\t\t\t\tdispatch(changeTodoTitleAC(id, changeTitle))\r\n\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t}\r\n\t\t)\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\n\r\n\r\n//types\r\nexport type addTodoListActionType = ReturnType<typeof addTodolistAC>\r\nexport type removeTodoListActionType = ReturnType<typeof removeTodolistAC>\r\nexport type setTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed' ; // тип значения фильтров (пропсов) для кнопок\r\nexport type TodolistsReducerType = TodolistType & {\r\n\tfilter: FilterValuesType,\r\n\tentityStatus: RequestStatusType\r\n}\r\ntype ThunkType = ActionType | SetErrorActionType | SetStatusActionType\r\n\r\n\r\ntype ActionType =\r\n\t| removeTodoListActionType\r\n\t| setTodolistsActionType\r\n\t| addTodoListActionType\r\n\t| ReturnType<typeof changeTodoTitleAC>\r\n\t| ReturnType<typeof changeTodoListFilterAC>\r\n\t| ReturnType<typeof changeTodolistEntityStatusAC>\r\n","import {\r\n\taddTodoListActionType,\r\n\tremoveTodoListActionType,\r\n\tsetTodolistsActionType\r\n} from '../todolists-reducer/todolists-reducer'\r\nimport {AppTasksType} from '../../../app/App'\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from '../../../../api/tasks/tasks-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RootStateType} from '../../../app/store'\r\nimport {setErrorAC, SetErrorActionType, setStatusAC, SetStatusActionType} from '../../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../../utils/HandleErrorUtils'\r\n\r\n\r\nconst initialState: AppTasksType = {}\r\n\r\nexport const tasksReducer = (state: AppTasksType = initialState, action: ActionType): AppTasksType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'REMOVE-TASK':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistId]:\r\n\t\t\t\t\tstate[action.todolistId].filter(t => t.id !== action.taskId)\r\n\t\t\t}\r\n\t\tcase 'ADD-TASK':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.task.todoListId]:\r\n\t\t\t\t\t[action.task, ...state[action.task.todoListId]]\r\n\t\t\t}\r\n\t\tcase 'CHANGE-TASK-STATUS':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistId]:\r\n\t\t\t\t\tstate[action.todolistId].map(t => t.id === action.taskId\r\n\t\t\t\t\t\t? {...t, ...action.model} : t)\r\n\t\t\t}\r\n\t\tcase 'UPDATE-TASK':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ?\r\n\t\t\t\t\t{...t, title: action.newTitleTask} : t)\r\n\t\t\t}\r\n\t\tcase 'ADD-TODOLIST':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolist.id]: []\r\n\t\t\t}\r\n\t\tcase 'REMOVE-TODOLIST': {\r\n\t\t\tlet copyState = {...state}\r\n\t\t\tdelete copyState[action.idAC]\r\n\t\t\treturn copyState\r\n\t\t}\r\n\t\tcase 'SET-TODOLISTS': {\r\n\t\t\tconst copyState = {...state}\r\n\t\t\taction.todolists.forEach(tl => {\r\n\t\t\t\tcopyState[tl.id] = []\r\n\t\t\t})\r\n\t\t\treturn copyState\r\n\t\t}\r\n\t\tcase 'SET-TASKS':\r\n\t\t\treturn {...state, [action.todolistId]: action.tasks}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n//actions\r\nexport const removeTasksAC = (taskId: string, todolistId: string) => ({\r\n\ttype: 'REMOVE-TASK',\r\n\ttaskId,\r\n\ttodolistId\r\n}) as const\r\nexport const addTasksAC = (task: TaskType) => ({type: 'ADD-TASK', task}) as const\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskType, todolistId: string) => ({\r\n\ttype: 'CHANGE-TASK-STATUS',\r\n\ttaskId,\r\n\tmodel,\r\n\ttodolistId\r\n}) as const\r\nexport const changeTitleTaskAC = (taskId: string, newTitleTask: string, todolistId: string) => ({\r\n\ttype: 'UPDATE-TASK',\r\n\ttaskId,\r\n\tnewTitleTask,\r\n\ttodolistId\r\n}) as const\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n\ttype: 'SET-TASKS',\r\n\ttasks,\r\n\ttodolistId\r\n}) as const\r\n\r\n//thunks\r\nexport const getTasksThunkCreator = (todolistId: string) => {\r\n\treturn (dispatch: Dispatch<ThunkType>) => {\r\n\t\tdispatch(setStatusAC('loading'))\r\n\t\ttasksAPI.getTasks(todolistId)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tdispatch(setTasksAC(res.data.items, todolistId))\r\n\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t\t})\r\n\t}\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ThunkType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\ttasksAPI.deleteTask(taskId, todolistId)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(removeTasksAC(taskId, todolistId))\r\n\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\nexport const addTasksTC = (todolistId: string, title: string) => (dispatch: Dispatch<ThunkType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\ttasksAPI.createTask(todolistId, title)\r\n\t\t.then(res => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\tdispatch(addTasksAC(res.data.data.item))\r\n\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\thandleServerAppError(res.data, dispatch)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t\t}\r\n\t\t)\r\n}\r\nexport const changeTaskStatusTC = (taskId: string, domainModel: UpdateDomainTaskType, todolistId: string) =>\r\n\t(dispatch: Dispatch<ThunkType>, getState: () => RootStateType) => {\r\n\t\tconst task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n\t\tif (task) {\r\n\t\t\tconst apiModel: UpdateTaskModelType = {\r\n\t\t\t\ttitle: task.title,\r\n\t\t\t\tdescription: task.description,\r\n\t\t\t\tstatus: task.status,\r\n\t\t\t\tcompleted: task.completed,\r\n\t\t\t\tpriority: task.priority,\r\n\t\t\t\tstartDate: task.startDate,\r\n\t\t\t\tdeadline: task.deadline,\r\n\t\t\t\t...domainModel\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdispatch(setStatusAC('loading'))\r\n\t\t\ttasksAPI.updateTaskTitle(taskId, apiModel, todolistId)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tdebugger\r\n\t\t\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\t\t\tdispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n\t\t\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\thandleServerAppError(res.data, dispatch)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t\t\t})\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\ntype ThunkType = ActionType | SetErrorActionType | SetStatusActionType\r\n\r\n//types\r\nexport type UpdateDomainTaskType = {\r\n\ttitle?: string,\r\n\tdescription?: string,\r\n\tstatus?: TaskStatuses,\r\n\tpriority?: TaskPriorities,\r\n\tstartDate?: string,\r\n\tdeadline?: string\r\n}\r\n\r\ntype ActionType =\r\n\t| ReturnType<typeof removeTasksAC>\r\n\t| ReturnType<typeof addTasksAC>\r\n\t| ReturnType<typeof updateTaskAC>\r\n\t| ReturnType<typeof changeTitleTaskAC>\r\n\t| ReturnType<typeof setTasksAC>\r\n\t| addTodoListActionType\r\n\t| setTodolistsActionType\r\n\t| removeTodoListActionType\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\n\r\nimport {todolistsReducer} from '../todolists-lists/todolist/todolists-reducer/todolists-reducer'\r\nimport {tasksReducer} from '../todolists-lists/todolist/tasks-reducer/tasks-reducer'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../login/auth-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodolists: todolistsReducer,\r\n\ttasks: tasksReducer,\r\n\tapp: appReducer,\r\n\tauth: authReducer\r\n})\r\n\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\ntype AddNewItemPropsType = {\r\n\taddNewItem: (title: string) => void\r\n\tdisabled?: boolean\r\n}\r\n\r\nexport const AddNewItemComponent = React.memo(({addNewItem, disabled, ...props}: AddNewItemPropsType) => {\r\n\tconsole.log('AddNewItemComponent render')\r\n\t//стейт новых тасок.\r\n\tconst [addNewTitle, setAddNewTitle] = useState('')\r\n\tconst [error, setError] = useState<string | null>(null)\r\n\r\n\t// добавление нового тудулиста\r\n\tconst addNewTask = () => {\r\n\t\tif (addNewTitle.trim() !== '') {\r\n\t\t\taddNewItem(addNewTitle)\r\n\t\t\tsetAddNewTitle('')\r\n\t\t} else {\r\n\t\t\tsetError('Title is required')\r\n\t\t}\r\n\t}\r\n\r\n\t// читаем введенные значения в инпуте и отправляем его наверх в апп с помощью колбек функции\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\t// e: ChangeEvent<HTMLInputElement> - сюда приходят значения с поля ввода ( простыми словами введенные, пользователем, значения.) ChangeEvent происходит с инпутом (HTMLInputElement)\r\n\t\t// берем текушие значения из инпута(e: ChangeEvent<HTMLInputElement>)  и преобразуем их в функцию (setNewTaskTitle) добавления нового значения в title. значение отлавливаем из inputa (e.currentTarget.value)\r\n\t\tsetAddNewTitle(e.//event сокрщ. е. - любое событие, которое происходит в объектной модели документа\r\n\t\t\tcurrentTarget.// обработчик события (ловим событие) e.currentTarget Определяет элемент, в котором в данный момент обрабатывается событие, при движении события внутри DOM. currentTarget: это элемент, на который вы фактически связали событие. Это никогда не изменится. target: какой бы элемент ни был на самом деле нажат. Он может меняться, поскольку это может быть внутри элемента, к которому было связано событие.\r\n\t\t\tvalue) // мы можем получить данные из этого поля ввода. А после, например, вывести их в консоль\r\n\t}\r\n\r\n\t// добавляем тудулист с ENTER\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => { //берем событие с клавиатуры из инпута  (e: KeyboardEvent<HTMLInputElement>) KeyboardEvent происходит с инпутом (HTMLInputElement)\r\n\t\tif (error !== null) {\r\n\t\t\tsetError(null)\r\n\t\t}\r\n\t\tif (e.charCode === 13) { // charCode это значение кнопок клавы на машином языке, понять номер каждой клавиши можно на сайте https://keycode.info/. если нажатие клавиши на клаве ентер, то по чаркоду это 13, если это равно по типу 13 то добавь новую таску\r\n\t\t\taddNewTask() // добавь новый элемент\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField //поле ввода\r\n\t\t\t\tvariant={'outlined'}\r\n\t\t\t\terror={!!error} // добавление подсветки ошибки\r\n\t\t\t\tvalue={addNewTitle} // callback // получаем данные из поля ввода\r\n\t\t\t\tonChange={onChangeHandler} // callback // onChange показывает и позволяет изменять значения поля ввода\r\n\t\t\t\tonKeyPress={onKeyPressHandler} // callback // (onKeyPress - когда клавиша нажата. onKeyDown - когда клавиша нажата, но не отпущена. onKeyUp когда клавиша поднята. onKeyDown+onKeyUp = onKeyPress) при нажатии enter добавляем таску\r\n\t\t\t\tlabel={'Enter text'}\r\n\t\t\t\thelperText={error}\r\n\t\t\t\tdisabled={disabled}\r\n\t\t\t/>\r\n\t\t\t<IconButton // новые кнопки из библиотеки material ui\r\n\t\t\t\tonClick={addNewTask} // добавление нового тудулиста\r\n\t\t\t\tcolor={'primary'}\r\n\t\t\t\tdisabled={disabled}\r\n\t\t\t> <AddBox/> </IconButton>\r\n\t\t</div>\r\n\t)\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\ntype ChangeTitleNamePropsType = {\r\n    changeTitleValue: string\r\n    onChange: (newItemValue: string) => void\r\n}\r\n\r\nexport const ChangeTitleNameComponent = React.memo ( (props: ChangeTitleNamePropsType) => {\r\n    \r\n    console.log('ChangeTitleNameComponent render')\r\n    \r\n    let [editModeHook, setEditModeHook] = useState(false);\r\n    let [titleChangeNameHook, setTitleChangeNameHook] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditModeHook(true)\r\n        setTitleChangeNameHook (props.changeTitleValue) // приходит старое значение из value\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditModeHook(false)\r\n        props.onChange(titleChangeNameHook) // уходит новое значение\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleChangeNameHook(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        editModeHook\r\n            ? <TextField\r\n                value={titleChangeNameHook}\r\n                onBlur={activateViewMode}\r\n                autoFocus\r\n                onChange={onChangeTitleHandler}\r\n            />\r\n            : <span onDoubleClick={activateEditMode}>{props.changeTitleValue}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {ChangeTitleNameComponent} from '../../../change-title-item/ChangeTitleNameComponent';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from \"../../../../api/tasks/tasks-api\";\r\n\r\n\r\ntype TasksPropsType = {\r\n\ttask: TaskType\r\n\ttodolistId: string\r\n\tchangeTaskStatus: (tasksId: string, status: TaskStatuses, todoListsId: string) => void // меняет галку таски\r\n\tchangeTaskTitle: (tasksId: string, tasksTitle: string, todoListsId: string) => void   // меняет название таски\r\n\tremoveTask: (todoListsId: string, tasksId: string,) => void // удаление тасок происходит только по id и типу string. принимает айдишник и ничего не возращает\r\n\r\n\t\r\n}\r\nexport const Task = React.memo ((props: TasksPropsType) => {\r\n\t\r\n\tconst onClickHandler = () => {\r\n\t\t/*debugger*/\r\n\t\treturn props.removeTask(props.task.id, props.todolistId)\r\n\t} //при нажатии кнопки удаляется таска. ВАЖНО функция removeTask вызывается и туда залетают параметры с id и улетает назад в колбеке\r\n\t\r\n\t// меняет галку таски\r\n\tconst onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tlet newIsDoneValue = e.currentTarget.checked;\r\n\t\tprops.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\r\n\t}\r\n\t// меняет название таски\r\n\tconst onChangeTitle = useCallback ( (newItemValue: string) => {\r\n\t\tprops.changeTaskTitle(props.task.id, newItemValue, props.todolistId);\r\n\t}, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\t\r\n\treturn (\r\n\t\t<li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n\t\t\t\r\n\t\t\t{/*подключенный checkbox из material ui*/}\r\n\t\t\t<Checkbox\r\n\t\t\t\tcolor={'primary'}\r\n\t\t\t\tonChange={onChangeStatus}\r\n\t\t\t\tchecked={props.task.status === TaskStatuses.Completed}/> {/*состояние галки*/}\r\n\t\t\t<ChangeTitleNameComponent\r\n\t\t\t\tchangeTitleValue={props.task.title}\r\n\t\t\t\tonChange={onChangeTitle}\r\n\t\t\t/>\r\n\r\n\t\t\t<IconButton onClick={onClickHandler}>\r\n\t\t\t\t<Delete/>\r\n\t\t\t</IconButton>\r\n\t\t</li>)\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddNewItemComponent} from '../../add-new-item/AddNewItemComponent';\r\nimport {ChangeTitleNameComponent} from '../../change-title-item/ChangeTitleNameComponent';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './tasks/Task';\r\nimport {FilterValuesType, TodolistsReducerType} from './todolists-reducer/todolists-reducer'\r\nimport {TaskStatuses, TaskType} from \"../../../api/tasks/tasks-api\";\r\nimport {getTasksThunkCreator} from \"./tasks-reducer/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// условия типов пропсов для функции тудулист\r\ntype TodolistType = {\r\n    todolist: TodolistsReducerType\r\n    tasks: Array<TaskType> // тип массив объектов // type TaskType\r\n    removeTask: (todoListsId: string, tasksId: string,) => void // удаление тасок происходит только по id и типу string. принимает айдишник и ничего не возращает\r\n    changeFilter: (filterValue: FilterValuesType, todoListsId: string) => void // в changeFilter можно указать только строку и точное название (\"All\" |(<- или) \"Active\" |(<- или) \"Completed\") или алл или актив или комплетед. ТС будет следить за правильностью написания данных\r\n    addNewTask: (tasksNewTitleInput: string, todoListId: string) => void // функция которая принимает title string и ничего не возвращает\r\n    // addNewTask: (tasksHookNewTITLEInput: string, tasksId: string) => void // функция которая принимает title string и ничего не возвращает\r\n    changeTaskStatus: (tasksId: string, status: TaskStatuses, todoListsId: string) => void // меняет галку таски\r\n    changeTaskTitle: (tasksId: string, tasksTitle: string, todoListsId: string) => void   // меняет название таски\r\n    removeTodoList: (todoListsId: string) => void  // удаление тудулиста\r\n    changeTodoListTitle: (todoListsId: string, newChangeTitleValue: string) => void  // меняет название тудулиста\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodoList = React.memo (function ({demo = false,...props}: TodolistType) { // props: any - что угодно, тоесть не задали четко тип, который будет отслеживаться\r\n    console.log(' TodoList render')\r\n\r\n    //if (typeof props.demo === 'undefined') props.demo = false\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        console.log('log  ' + props.todolist.id)\r\n        dispatch(getTasksThunkCreator(props.todolist.id))\r\n    },[])\r\n\r\n\r\n    // новое добавление таски\r\n    const addNewTask = useCallback((title: string) => {\r\n        props.addNewTask(title, props.todolist.id); //callback функция прыгает в пропсы\r\n    }, [props.addNewTask, props.todolist.id]);\r\n\r\n\r\n\t// кнопка all отдает значение наверх и в APP уже меняется стейт\r\n    const onClickAllButton = useCallback (() => {\r\n        props.changeFilter('All', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id]);\r\n\t// кнопка Active отдает значение наверх и в APP уже меняется стейт\r\n    const onClickActiveButton = useCallback (() => {\r\n        props.changeFilter('Active', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id]);\r\n\t// кнопка Completed отдает значение наверх и в APP уже меняется стейт\r\n    const onClickComletedButton = useCallback (() => {\r\n        props.changeFilter('Completed', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id]);\r\n\t\r\n    \r\n\t// удаление тудулистов\r\n    const removeTodoListCallBack = () => {\r\n        props.removeTodoList(props.todolist.id)\r\n    }\r\n\r\n\t// изменение названия тудулистов\r\n    const changeTodoListTitleCallBack = useCallback ((newChangeTitleValue: string) => {\r\n        props.changeTodoListTitle(props.todolist.id, newChangeTitleValue)\r\n    }, [props.changeTodoListTitle, props.todolist.id])\r\n    \r\n    \r\n    let tasksForTodoList = props.tasks;\r\n    if (props.todolist.filter === 'Active') { // при нажатии кнопки active, фильтр сравниваем из тудулиста\r\n        tasksForTodoList = props.tasks.filter( t => t.status === TaskStatuses.New) // если при фильтре у таски isDone = false, от пропустят таски только с false\r\n    }\r\n    if (props.todolist.filter === 'Completed') { // при нажатии кнопки Completed, фильтр сравниваем из тудулиста\r\n        tasksForTodoList = props.tasks.filter( t => t.status === TaskStatuses.Completed) // если при фильтре у таски isDone = true, от пропустят таски только с true\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3> {/*заголовки тасок*/}\r\n                <ChangeTitleNameComponent\r\n                    changeTitleValue={props.todolist.title}\r\n                    onChange={changeTodoListTitleCallBack}\r\n                />\r\n                <IconButton onClick={removeTodoListCallBack} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            \r\n            <AddNewItemComponent addNewItem={addNewTask} disabled={props.todolist.entityStatus === 'loading'}/> {/* добавление новой таски */}\r\n            \r\n            <ul>\r\n\r\n                {   props.tasks.map ( (t) => <Task\r\n                        task={t}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        todolistId={props.todolist.id}\r\n                        key={t.id}\r\n                        />\r\n                    )\r\n                }\r\n            </ul>\r\n            <div>\r\n\t\t\t\t{/*подключенный Button из material ui*/}\r\n                <Button variant={props.todolist.filter === 'All' ? 'contained' : 'text'} onClick={onClickAllButton} color={'inherit'} >All</Button>\r\n                <Button variant={props.todolist.filter === 'Active' ? 'contained' : 'text'} onClick={onClickActiveButton} color={'primary'} >Active</Button>\r\n                <Button variant={props.todolist.filter === 'Completed' ? 'contained' : 'text'} onClick={onClickComletedButton} color={'secondary'} >Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {RootStateType} from '../app/store'\r\nimport {\r\n\taddTodolistsTC,\r\n\tchangeTodoListFilterAC,\r\n\tchangeTodoTitleTC,\r\n\tfetchTodolistsThunkCreator,\r\n\tFilterValuesType,\r\n\tremoveTodolistsTC,\r\n\tTodolistsReducerType\r\n} from './todolist/todolists-reducer/todolists-reducer'\r\nimport {addTasksTC, changeTaskStatusTC, removeTaskTC} from './todolist/tasks-reducer/tasks-reducer'\r\nimport {TaskStatuses} from '../../api/tasks/tasks-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddNewItemComponent} from '../add-new-item/AddNewItemComponent'\r\nimport {TodoList} from './todolist/Todolist'\r\nimport {AppTasksType} from '../app/App'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype TodolistsListPropsType = {\r\n\tdemo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst todolists = useSelector<RootStateType, Array<TodolistsReducerType>>(state => state.todolists)\r\n\tconst tasks = useSelector<RootStateType, AppTasksType>(state => state.tasks)\r\n\tconst isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (demo || !isLoggedIn) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(fetchTodolistsThunkCreator())\r\n\t}, [isLoggedIn])\r\n\r\n\r\n\t// удаление таски по id\r\n\tconst removeTask = useCallback((taskId: string, todolistId: string) => {\r\n\t\tdispatch(removeTaskTC(taskId, todolistId))\r\n\t}, [])\r\n\r\n\t// добавление новой таски\r\n\tconst addNewTask = useCallback((tasksNewTitleInput: string, todoListId: string) => {\r\n\t\tdispatch(addTasksTC(tasksNewTitleInput, todoListId))\r\n\t}, [])\r\n\r\n\t// change Status - изменить статус таски, изменить статус в isDone\r\n\tconst changeTaskStatus = useCallback((tasksId: string, status: TaskStatuses, todoListsId: string) => {\r\n\t\tdispatch(changeTaskStatusTC(tasksId, {status}, todoListsId))\r\n\t}, [])\r\n\r\n\t// изменение названия таски\r\n\tconst changeTaskTitle = useCallback((tasksId: string, tasksTitle: string, todoListsId: string) => {\r\n\t\tdispatch(changeTaskStatusTC(tasksId, {title: tasksTitle}, todoListsId))\r\n\t}, [])\r\n\r\n\r\n\t// меняем данные кнопок не хардкодом, а при нажатии (change Filter - изменить фильтр)\r\n\tconst changeFilterTodolist = useCallback((filterValue: FilterValuesType, todoListsId: string) => {\r\n\t\tdispatch(changeTodoListFilterAC(todoListsId, filterValue))\r\n\t}, [])\r\n\r\n\t// удаление тудулиста\r\n\tconst removeTodoList = useCallback((todoListsId: string) => {\r\n\t\tdispatch(removeTodolistsTC(todoListsId))\r\n\t}, [])\r\n\r\n\t// редактирование тудулиста\r\n\tconst changeTodoListTitle = useCallback((todoListsId: string, newChangeTitleValue: string) => {\r\n\t\tdispatch(changeTodoTitleTC(todoListsId, newChangeTitleValue))\r\n\t}, [])\r\n\r\n\t// добавление нового тудулиста\r\n\tconst addNewTodoList = useCallback((title: string) => {\r\n\t\tdispatch(addTodolistsTC(title))\r\n\t}, [])\r\n\r\n\tif (!isLoggedIn) {\r\n\t\treturn <Redirect to={'/login'}/>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Grid container style={{padding: '20px'}}>\r\n\t\t\t\t<AddNewItemComponent addNewItem={addNewTodoList}/>\r\n\t\t\t</Grid>\r\n\r\n\t\t\t<Grid container spacing={3}>\r\n\r\n\t\t\t\t{todolists.map(tl => {\r\n\r\n\t\t\t\t\tlet allTodolistTasks = tasks[tl.id]\r\n\t\t\t\t\tlet tasksForTodoList = allTodolistTasks\r\n\r\n\t\t\t\t\tif (tl.filter === 'Active') {\r\n\t\t\t\t\t\ttasksForTodoList = allTodolistTasks.filter(t => t.status === TaskStatuses.New)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tl.filter === 'Completed') {\r\n\t\t\t\t\t\ttasksForTodoList = allTodolistTasks.filter(t => t.status === TaskStatuses.Completed)\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t<Paper style={{padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<TodoList\r\n\t\t\t\t\t\t\t\t\tkey={tl.id}\r\n\t\t\t\t\t\t\t\t\ttodolist={tl}\r\n\t\t\t\t\t\t\t\t\ttasks={tasksForTodoList}  // отфильтрованные таски по кнопкам\r\n\t\t\t\t\t\t\t\t\tremoveTask={removeTask} //  удаление таски\r\n\t\t\t\t\t\t\t\t\tchangeFilter={changeFilterTodolist} // юзабельность кнопок all active completed\r\n\t\t\t\t\t\t\t\t\taddNewTask={addNewTask} // добавление новой таски\r\n\t\t\t\t\t\t\t\t\tchangeTaskStatus={changeTaskStatus} //передаем функцию, чтобы менять статус таске\r\n\t\t\t\t\t\t\t\t\tchangeTaskTitle={changeTaskTitle} //передаем функцию, чтобы менять статус таске\r\n\t\t\t\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\t\t\t\tchangeTodoListTitle={changeTodoListTitle}\r\n\t\t\t\t\t\t\t\t\tdemo={demo} // тестовое состояние\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Grid>\r\n\t\t</>\r\n\t)\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {RootStateType} from '../app/store'\r\nimport {setErrorAC} from '../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackBar() {\r\n\tconst [open, setOpen] = React.useState(true)\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\t\tif (reason === 'clickaway') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(setErrorAC(null))\r\n\t\t//setOpen(false)\r\n\t}\r\n\r\n\tconst error = useSelector<RootStateType, string | null>( state => state.app.error)\r\n\r\n\tconst isOpen = error !== null\r\n\r\n\treturn (\r\n\t\t<Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n\t\t\t<Alert onClose={handleClose} severity=\"error\">\r\n\t\t\t\t{error}\r\n\t\t\t</Alert>\r\n\t\t</Snackbar>\r\n\t)\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {loginTC} from './auth-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {setStatusAC} from '../app/app-reducer'\r\nimport {RootStateType} from '../app/store'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst isLoggedIn = useSelector<RootStateType>(state => state.auth.isLoggedIn)\r\n\r\n\tconst validate = (values: any) => {\r\n\t\tconst errors = {\r\n\t\t\temail: '',\r\n\t\t\tpassword: ''\r\n\t\t}\r\n\t\tif (!values.email) {\r\n\t\t\terrors.email = 'Email address is required'\r\n\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\terrors.email = 'Don\\'t forget @ and enter domain data '\r\n\t\t}\r\n\r\n\t\tif (!values.password) {\r\n\t\t\terrors.password = 'Password is required'\r\n\t\t} else if (values.password) {\r\n\t\t\terrors.password = ''\r\n\t\t}\r\n\t}\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate,\r\n\t\tonSubmit: values => {\r\n\t\t\tdebugger\r\n\t\t\tdispatch(loginTC(values))\r\n\t\t}\r\n\t})\r\n\r\n\tif (isLoggedIn) {\r\n\t\treturn <Redirect to={'/'}/>\r\n\t}\r\n\r\n\treturn <Grid container justify=\"center\" >\r\n\t\t<Grid item xs={4}>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<FormControl>\r\n\t\t\t\t\t<FormLabel>\r\n\t\t\t\t\t\t<p>Email: free@samuraijs.com</p>\r\n\t\t\t\t\t\t<p>Password: free</p>\r\n\t\t\t\t\t</FormLabel>\r\n\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tlabel={'Remember me'}\r\n\t\t\t\t\t\t\tcontrol={<Checkbox/>}\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n\t\t\t\t\t</FormGroup>\r\n\t\t\t\t</FormControl>\r\n\t\t\t</form>\r\n\t\t</Grid>\r\n\t</Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n\tAppBar,\r\n\tButton,\r\n\tCircularProgress,\r\n\tContainer,\r\n\tIconButton,\r\n\tLinearProgress,\r\n\tToolbar,\r\n\tTypography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TaskType} from '../../api/tasks/tasks-api'\r\nimport {TodolistsList} from '../todolists-lists/TodolistsList'\r\nimport {ErrorSnackBar} from '../error-snackbar/ErrorSnackBar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {RootStateType} from './store'\r\nimport {initializedAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../login/Login'\r\nimport {logoutTC} from '../login/auth-reducer'\r\n\r\n\r\nexport function App({demo = false}: AppPropsType) {\r\n\tconsole.log('App render')\r\n\r\n\tconst status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\r\n\tconst initialized = useSelector<RootStateType, boolean>(state => state.app.initialized)\r\n\tconst isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(initializedAppTC())\r\n\t}, [initialized])\r\n\r\n\tconst logoutHandler = useCallback(() => {\r\n\t\tdispatch(logoutTC())\r\n\t}, [])\r\n\r\n\r\n\tif (!initialized) {\r\n\t\treturn <div style={{position: 'fixed', top: '50%', textAlign: 'center', width: '100%'}}>\r\n\t\t\t<CircularProgress/>\r\n\t\t</div>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<div className={'App'}>\r\n\t\t\t\t<ErrorSnackBar/>\r\n\t\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n\t\t\t\t\t\t\t<Menu/>\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\tTodolist APP\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t{isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t\t{status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n\t\t\t\t</AppBar>\r\n\t\t\t\t<Container fixed>\r\n\t\t\t\t\t<Route path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n\r\n\t\t\t\t\t<Route exact path={'/login'} render={() => <Login/>}/>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t</BrowserRouter>\r\n\t)\r\n}\r\n\r\nexport type AppTasksType = {\r\n\t[key: string]: Array<TaskType>\r\n}\r\n\r\ntype AppPropsType = {\r\n\tdemo?: boolean\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport './index.css'\r\n\r\nimport {Provider} from 'react-redux'\r\nimport {store} from './components/app/store'\r\nimport {App} from './components/app/App'\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App/>\r\n\t</Provider>, document.getElementById('root'))\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}