{"version":3,"sources":["serviceWorker.ts","api/tasks/tasks-api.ts","api/todolist/todolists-api.ts","components/app/app-reducer.ts","components/todolists-lists/todolist/todolists-reducer/todolists-reducer.ts","components/todolists-lists/todolist/tasks-reducer/tasks-reducer.ts","components/app/store.ts","components/add-new-item/AddNewItemComponent.tsx","components/change-title-item/ChangeTitleNameComponent.tsx","components/todolists-lists/todolist/tasks/Task.tsx","components/todolists-lists/todolist/Todolist.tsx","components/todolists-lists/TodolistsList.tsx","components/error-snackbar/ErrorSnackBar.tsx","components/app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","updateTitle","put","initialState","status","error","setStatusAC","type","setErrorAC","tasksAPI","newTitle","taskId","changeTaskStatusTC","domainModel","dispatch","getState","task","tasks","find","t","id","apiModel","description","priority","startDate","deadline","then","model","updateTaskAC","rootReducer","combineReducers","todolists","state","action","filter","st","idAC","todolist","map","tl","titleAC","filterAC","todoListId","newTitleTask","copyState","forEach","app","store","createStore","applyMiddleware","thunkMiddleware","AddNewItemComponent","React","memo","props","console","log","useState","addNewTitle","setAddNewTitle","setError","addNewTask","trim","addNewItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","onClick","color","AddBox","ChangeTitleNameComponent","editModeHook","setEditModeHook","titleChangeNameHook","setTitleChangeNameHook","onBlur","autoFocus","onDoubleClick","changeTitleValue","Task","onChangeTitle","useCallback","newItemValue","changeTaskTitle","key","className","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","removeTask","Delete","TodoList","useDispatch","useEffect","res","setTasksAC","data","items","onClickAllButton","changeFilter","onClickActiveButton","onClickComletedButton","changeTodoListTitleCallBack","newChangeTitleValue","changeTodoListTitle","filterButton","todolistTitle","removeTodoList","Button","TodolistsList","useSelector","removeTasksAC","removeTaskTC","tasksNewTitleInput","resultCode","item","messages","length","tasksId","todoListsId","tasksTitle","changeFilterTodolist","filterValue","changeTodoListFilterAC","changeTitle","changeTodoTitleAC","addNewTodoList","addTodolistsTC","Grid","container","style","padding","spacing","allTodolistTasks","tasksForTodoList","Paper","Alert","elevation","ErrorSnackBar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e527f4b7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst settings = {\r\n\twithCredentials: true,\r\n\theaders: {\r\n\t\t'API-KEY': 'b61c59bc-c21c-4a07-9ff4-5b299b2d5ced'\r\n\t}\r\n}\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n\t...settings\r\n})\r\n\r\n//api\r\nexport const tasksAPI = {\r\n\r\n\tgetTasks(todolistId: string) {\r\n\t\treturn instance.get < ResponseTasksType > (`todo-lists/${todolistId}/tasks`)\r\n\t},\r\n\tcreateTask(newTitle: string, todolistId: string) {\r\n\t\treturn instance.post < ResponseTasksType<{item:TaskType}> > (`todo-lists/${todolistId}/tasks`, {title: newTitle})\r\n\t},\r\n\tdeleteTask(taskId: string, todolistId: string ) {\r\n\t\treturn instance.delete < ResponseTasksType > (`todo-lists/${todolistId}/tasks/${taskId}`)\r\n\t},\r\n\tupdateTaskTitle(taskId: string, status: UpdateTaskModelType, todolistId: string,) {\r\n\t\treturn instance.put < ResponseTasksType > (`todo-lists/${todolistId}/tasks/${taskId}`, {title: status})\r\n\t}\r\n}\r\n\r\n//types\r\nexport type TaskType = {\r\n\tid: string\r\n\ttodoListId: string\r\n\ttitle: string\r\n\tstatus: TaskStatuses\r\n\tpriority: TaskPriorities\r\n\tcompleted: boolean\r\n\tdescription: string\r\n\tstartDate: string\r\n\tdeadline: string\r\n\torder: number\r\n\taddedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n\ttitle: string,\r\n\tdescription: string,\r\n\tstatus: TaskStatuses,\r\n\tpriority: TaskPriorities,\r\n\tstartDate: string,\r\n\tdeadline: string\r\n}\r\nexport enum TaskStatuses {\r\n\tNew = 0,\r\n\tInProgress = 1,\r\n\tCompleted = 2,\r\n\tDraft = 3\r\n}\r\nexport enum TaskPriorities {\r\n\tLow = 0,\r\n\tMiddle = 1,\r\n\tHigh = 2,\r\n\tUrgent = 3,\r\n\tLater = 4\r\n}\r\ntype ResponseTasksType<D={}> = {\r\n\terror: string | null\r\n\ttotalCount: number\r\n\tdata: D\r\n\titems: TaskType [] // Array<TaskType>\r\n}","import axios from \"axios\";\r\nimport {FilterValuesType} from \"../../components/todolists-lists/todolist/todolists-reducer/todolists-reducer\";\r\n\r\nconst settings = {\r\n\twithCredentials: true,\r\n\theaders: {\r\n\t\t'API-KEY': 'b61c59bc-c21c-4a07-9ff4-5b299b2d5ced'\r\n\t}\r\n}\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n\t...settings\r\n})\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n\r\n\tgetTodolists(){\r\n\t\treturn instance.get <Array <TodolistType> >(`todo-lists`)\r\n\t},\r\n\tcreateTodolists(title: string) {\r\n\t\treturn instance.post < ResponseTodolistType <{item: TodolistType}> >  (`todo-lists`, {title: title})\r\n\t},\r\n\tdeleteTodolists(todolistId: string) {\r\n\t\treturn instance.delete< ResponseTodolistType >(`todo-lists/${todolistId}`)\r\n\t},\r\n\tupdateTodolistsTitle(todolistId: string, updateTitle: string) {\r\n\t\treturn instance.put< ResponseTodolistType >(`todo-lists/${todolistId}`, {title: updateTitle})\r\n\t}\r\n}\r\n\r\n//types\r\nexport type TodolistType = {\r\n\tid: string\r\n\ttitle: string\r\n\tfilter: FilterValuesType\r\n\taddedDate: string\r\n\torder: number\r\n}\r\ntype ResponseTodolistType<D={}> = {\r\n\tresultCode: number\r\n\tmessages: Array<string>\r\n\tdata: D\r\n}\r\n","\r\nconst initialState: InitialStateType = {\r\n\tstatus: 'loading',\r\n\terror: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'APP/SET-STATUS':\r\n\t\t\treturn {...state, status: action.status}\r\n\t\tcase 'APP/SET-ERROR':\r\n\t\t\treturn {...state, error: action.error}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n\r\nexport const setStatusAC = (status: RequestStatusType) => ({\r\n\ttype: 'APP/SET-STATUS', status\r\n}) as const\r\n\r\nexport const setErrorAC = (error: string | null) => ({\r\n\ttype: 'APP/SET-ERROR', error\r\n}) as const\r\n\r\n\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n\t// происходит ли сейчас взаимодействие с сервером\r\n\tstatus: RequestStatusType,\r\n\terror: string | null\r\n}\r\n\r\nexport type SetErrorActionType = ReturnType<typeof setErrorAC>\r\nexport type SetStatusActionType = ReturnType<typeof setStatusAC>\r\n\r\ntype ActionsType =\r\n\t| SetErrorActionType\r\n\t| SetStatusActionType\r\n","import {todolistsAPI, TodolistType} from \"../../../../api/todolist/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setStatusAC, SetStatusActionType} from '../../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistsReducerType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsReducerType> = initialState, action: ActionType): Array<TodolistsReducerType> => {\r\n\tswitch (action.type) {\r\n\t\tcase 'REMOVE-TODOLIST': return state.filter(st => st.id !== action.idAC)\r\n\t\tcase 'ADD-TODOLIST': return [...state, {...action.todolist, filter: 'All'}]\r\n\t\tcase 'CHANGE-TODOLIST-TITLE': return state.map( tl => tl.id === action.idAC ? {...tl, title: action.titleAC} : tl)\r\n\t\tcase 'CHANGE-TODOLIST-FILTER': return state.map( tl => tl.id === action.idAC ? {...tl, filter: action.filterAC} : tl)\r\n\t\tcase 'SET-TODOLISTS': return action.todolists.map(tl => ({...tl, filter: 'All'}))\r\n\t\tdefault: return state\r\n\t}\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', idAC: id}) as const\r\nexport const addTodolistAC = (todolist: TodolistType,) => ({type: 'ADD-TODOLIST', todolist}) as const\r\nexport const changeTodoTitleAC = (id: string, changeTitle: string) => ({\r\n\ttype: 'CHANGE-TODOLIST-TITLE',\r\n\tidAC: id,\r\n\ttitleAC: changeTitle,\r\n\tfilterAC: 'All'\r\n}) as const\r\nexport const changeTodoListFilterAC = (id: string, filterValue: FilterValuesType) => ({\r\n\ttype: 'CHANGE-TODOLIST-FILTER',\r\n\tfilterAC: filterValue,\r\n\tidAC: id\r\n}) as const\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists}) as const\r\n\r\n//thunks\r\nexport const fetchTodolistsThunkCreator = () => (dispatch: Dispatch<ActionType | SetStatusActionType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\ttodolistsAPI.getTodolists()\r\n\t\t.then((res) => {\r\n\t\t\tdispatch(setTodolistsAC(res.data))\r\n\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t})\r\n}\r\nexport const removeTodolistsTC = (todolistId: string) => (dispatch: Dispatch<ActionType | SetStatusActionType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\ttodolistsAPI.deleteTodolists(todolistId)\r\n\t\t.then((res) => {\r\n\t\t\t\tdispatch(removeTodolistAC(todolistId))\r\n\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t}\r\n\t\t)\r\n}\r\nexport const addTodolistsTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n\ttodolistsAPI.createTodolists(title)\r\n\t\t.then((res) => {\r\n\t\t\t\tdispatch(addTodolistAC(res.data.data.item))\r\n\t\t\t}\r\n\t\t)\r\n}\r\nexport const changeTodoTitleTC = (id: string, changeTitle: string) => (dispatch: Dispatch<ActionType>) => {\r\n\ttodolistsAPI.updateTodolistsTitle(id, changeTitle)\r\n\t\t.then((res) => {\r\n\t\t\t\tdispatch(changeTodoTitleAC(id, changeTitle))\r\n\t\t\t}\r\n\t\t)\r\n}\r\n\r\n//types\r\nexport type addTodoListActionType = ReturnType<typeof addTodolistAC>\r\nexport type removeTodoListActionType = ReturnType<typeof removeTodolistAC>\r\nexport type setTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed' ; // тип значения фильтров (пропсов) для кнопок\r\nexport type TodolistsReducerType = TodolistType & {\r\n\tfilter: FilterValuesType\r\n}\r\n\r\ntype ActionType =\r\n\t| removeTodoListActionType\r\n\t| setTodolistsActionType\r\n\t| addTodoListActionType\r\n\t| ReturnType<typeof changeTodoTitleAC>\r\n\t| ReturnType<typeof changeTodoListFilterAC>\r\n","import {\r\n\taddTodoListActionType,\r\n\tremoveTodoListActionType,\r\n\tsetTodolistsActionType\r\n} from '../todolists-reducer/todolists-reducer'\r\nimport {AppTasksType} from '../../../app/App'\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from '../../../../api/tasks/tasks-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RootStateType} from '../../../app/store'\r\nimport {setErrorAC, SetErrorActionType, setStatusAC, SetStatusActionType} from '../../../app/app-reducer'\r\n\r\nconst initialState: AppTasksType = {}\r\n\r\nexport const tasksReducer = (state: AppTasksType = initialState, action: ActionType): AppTasksType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'REMOVE-TASK':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistId]:\r\n\t\t\t\t\tstate[action.todolistId].filter(t => t.id !== action.taskId)\r\n\t\t\t}\r\n\t\tcase 'ADD-TASK':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.task.todoListId]:\r\n\t\t\t\t\t[action.task, ...state[action.task.todoListId]]\r\n\t\t\t}\r\n\t\tcase 'CHANGE-TASK-STATUS':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistId]:\r\n\t\t\t\t\tstate[action.todolistId].map(t => t.id === action.taskId\r\n\t\t\t\t\t\t? {...t, ...action.model} : t)\r\n\t\t\t}\r\n\t\tcase 'UPDATE-TASK':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ?\r\n\t\t\t\t\t{...t, title: action.newTitleTask} : t)\r\n\t\t\t}\r\n\t\tcase 'ADD-TODOLIST':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolist.id]: []\r\n\t\t\t}\r\n\t\tcase 'REMOVE-TODOLIST': {\r\n\t\t\tlet copyState = {...state}\r\n\t\t\tdelete copyState[action.idAC]\r\n\t\t\treturn copyState\r\n\t\t}\r\n\t\tcase 'SET-TODOLISTS': {\r\n\t\t\tconst copyState = {...state}\r\n\t\t\taction.todolists.forEach(tl => {\r\n\t\t\t\tcopyState[tl.id] = []\r\n\t\t\t})\r\n\t\t\treturn copyState\r\n\t\t}\r\n\t\tcase 'SET-TASKS':\r\n\t\t\treturn {...state, [action.todolistId]: action.tasks}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n//actions\r\nexport const removeTasksAC = (taskId: string, todolistId: string) => ({\r\n\ttype: 'REMOVE-TASK',\r\n\ttaskId,\r\n\ttodolistId\r\n}) as const\r\nexport const addTasksAC = (task: TaskType) => ({type: 'ADD-TASK', task}) as const\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskType, todolistId: string) => ({\r\n\ttype: 'CHANGE-TASK-STATUS',\r\n\ttaskId,\r\n\tmodel,\r\n\ttodolistId\r\n}) as const\r\nexport const changeTitleTaskAC = (taskId: string, newTitleTask: string, todolistId: string) => ({\r\n\ttype: 'UPDATE-TASK',\r\n\ttaskId,\r\n\tnewTitleTask,\r\n\ttodolistId\r\n}) as const\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n\ttype: 'SET-TASKS',\r\n\ttasks,\r\n\ttodolistId\r\n}) as const\r\n\r\n//thunks\r\nexport const getTasksThunkCreator = (todolistId: string) => {\r\n\treturn (dispatch: Dispatch<ActionType | SetStatusActionType>) => {\r\n\t\tdispatch(setStatusAC('loading'))\r\n\t\ttasksAPI.getTasks(todolistId)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tdispatch(setTasksAC(res.data.items, todolistId))\r\n\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t})\r\n\t}\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionType | SetStatusActionType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\ttasksAPI.deleteTask(taskId, todolistId)\r\n\t\t.then( res => {\r\n\t\t\tdispatch(removeTasksAC(taskId, todolistId))\r\n\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t})\r\n}\r\nexport const addTasksTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionType | SetErrorActionType | SetStatusActionType>) => {\r\n\tdispatch(setStatusAC('loading'))\r\n\ttasksAPI.createTask(todolistId, title)\r\n\t\t.then(res => {\r\n\t\t\tdebugger\r\n\t\t\t// @ts-ignore\r\n\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\tdispatch(addTasksAC(res.data.data.item))\r\n\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tif (res.data.messages.length) {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tdispatch(setErrorAC(res.data.messages[0]))\r\n\t\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdispatch(setStatusAC('failed'))\r\n\r\n\t\t})\r\n}\r\nexport const changeTaskStatusTC = (taskId: string, domainModel: UpdateDomainTaskType, todolistId: string) =>\r\n\t(dispatch: Dispatch<ActionType | SetStatusActionType>, getState: () => RootStateType) => {\r\n\t\tconst task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\t\tif (task) {\r\n\t\t\tconst apiModel: UpdateTaskModelType = {\r\n\t\t\t\ttitle: task.title,\r\n\t\t\t\tdescription: task.description,\r\n\t\t\t\tstatus: task.status,\r\n\t\t\t\tpriority: task.priority,\r\n\t\t\t\tstartDate: task.startDate,\r\n\t\t\t\tdeadline: task.deadline,\r\n\t\t\t\t...domainModel\r\n\t\t\t}\r\n\t\t\tdispatch(setStatusAC('loading'))\r\n\t\t\ttasksAPI.updateTaskTitle(taskId, apiModel, todolistId)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tdispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n\t\t\t\t\tdispatch(setStatusAC('succeeded'))\r\n\t\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n/*\r\nexample\r\n\r\nexport const addTasksTC = (title: string, todolistId: string) => {\r\n\tdebugger\r\n\treturn (dispatch: Dispatch) => {\r\n\t\tdebugger\r\n\t\ttasksAPI.createTask(title, todolistId )\r\n\t\t\t.then(res => {\r\n\t\t\t\tdebugger\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst task = res.data.data.item\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst action = addTasksAC(task)\r\n\t\t\t\tdispatch(action)\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tdebugger\r\n\t\t\t})\r\n\t}\r\n}*/\r\n\r\n//types\r\nexport type UpdateDomainTaskType = {\r\n\ttitle?: string,\r\n\tdescription?: string,\r\n\tstatus?: TaskStatuses,\r\n\tpriority?: TaskPriorities,\r\n\tstartDate?: string,\r\n\tdeadline?: string\r\n}\r\n\r\ntype ActionType =\r\n\t| ReturnType<typeof removeTasksAC>\r\n\t| ReturnType<typeof addTasksAC>\r\n\t| ReturnType<typeof updateTaskAC>\r\n\t| ReturnType<typeof changeTitleTaskAC>\r\n\t| ReturnType<typeof setTasksAC>\r\n\t| addTodoListActionType\r\n\t| setTodolistsActionType\r\n\t| removeTodoListActionType\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todolistsReducer} from '../todolists-lists/todolist/todolists-reducer/todolists-reducer';\r\nimport {tasksReducer} from '../todolists-lists/todolist/tasks-reducer/tasks-reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodolists: todolistsReducer,\r\n\ttasks: tasksReducer,\r\n\tapp: appReducer\r\n})\r\n\r\n\r\nexport type RootStateType = ReturnType <typeof rootReducer>\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport { AddBox } from \"@material-ui/icons\";\r\n\r\ntype AddNewItemPropsType = {\r\n    addNewItem: (title: string) => void\r\n}\r\n\r\nexport const AddNewItemComponent = React.memo ((props: AddNewItemPropsType) => {\r\n    console.log('AddNewItemComponent render')\r\n    //стейт новых тасок.\r\n    const [addNewTitle, setAddNewTitle] = useState('');\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    // добавление нового тудулиста\r\n    const addNewTask = () => {\r\n        if (addNewTitle.trim() !== '') {\r\n            props.addNewItem(addNewTitle);\r\n            setAddNewTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    // читаем введенные значения в инпуте и отправляем его наверх в апп с помощью колбек функции\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // e: ChangeEvent<HTMLInputElement> - сюда приходят значения с поля ввода ( простыми словами введенные, пользователем, значения.) ChangeEvent происходит с инпутом (HTMLInputElement)\r\n        // берем текушие значения из инпута(e: ChangeEvent<HTMLInputElement>)  и преобразуем их в функцию (setNewTaskTitle) добавления нового значения в title. значение отлавливаем из inputa (e.currentTarget.value)\r\n        setAddNewTitle(e.//event сокрщ. е. - любое событие, которое происходит в объектной модели документа\r\n            currentTarget.// обработчик события (ловим событие) e.currentTarget Определяет элемент, в котором в данный момент обрабатывается событие, при движении события внутри DOM. currentTarget: это элемент, на который вы фактически связали событие. Это никогда не изменится. target: какой бы элемент ни был на самом деле нажат. Он может меняться, поскольку это может быть внутри элемента, к которому было связано событие.\r\n            value); // мы можем получить данные из этого поля ввода. А после, например, вывести их в консоль\r\n    }\r\n\r\n    // добавляем тудулист с ENTER\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => { //берем событие с клавиатуры из инпута  (e: KeyboardEvent<HTMLInputElement>) KeyboardEvent происходит с инпутом (HTMLInputElement)\r\n        if (error !== null){\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) { // charCode это значение кнопок клавы на машином языке, понять номер каждой клавиши можно на сайте https://keycode.info/. если нажатие клавиши на клаве ентер, то по чаркоду это 13, если это равно по типу 13 то добавь новую таску\r\n            addNewTask(); // добавь новый элемент\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField //поле ввода\r\n                variant={'outlined'}\r\n                error={!!error} // добавление подсветки ошибки\r\n                value={addNewTitle} // callback // получаем данные из поля ввода\r\n                onChange={onChangeHandler} // callback // onChange показывает и позволяет изменять значения поля ввода\r\n                onKeyPress={onKeyPressHandler} // callback // (onKeyPress - когда клавиша нажата. onKeyDown - когда клавиша нажата, но не отпущена. onKeyUp когда клавиша поднята. onKeyDown+onKeyUp = onKeyPress) при нажатии enter добавляем таску\r\n                label={'Enter text'}\r\n                helperText={error}\r\n            />\r\n            <IconButton // новые кнопки из библиотеки material ui\r\n                onClick={addNewTask} // добавление нового тудулиста\r\n                color={'primary'}\r\n            > <AddBox /> </IconButton>\r\n        </div>\r\n    )\r\n} )","import React, {ChangeEvent, useState} from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\ntype ChangeTitleNamePropsType = {\r\n    changeTitleValue: string\r\n    onChange: (newItemValue: string) => void\r\n}\r\n\r\nexport const ChangeTitleNameComponent = React.memo ( (props: ChangeTitleNamePropsType) => {\r\n    \r\n    console.log('ChangeTitleNameComponent render')\r\n    \r\n    let [editModeHook, setEditModeHook] = useState(false);\r\n    let [titleChangeNameHook, setTitleChangeNameHook] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditModeHook(true)\r\n        setTitleChangeNameHook (props.changeTitleValue) // приходит старое значение из value\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditModeHook(false)\r\n        props.onChange(titleChangeNameHook) // уходит новое значение\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleChangeNameHook(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        editModeHook\r\n            ? <TextField\r\n                value={titleChangeNameHook}\r\n                onBlur={activateViewMode}\r\n                autoFocus\r\n                onChange={onChangeTitleHandler}\r\n            />\r\n            : <span onDoubleClick={activateEditMode}>{props.changeTitleValue}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {ChangeTitleNameComponent} from '../../../change-title-item/ChangeTitleNameComponent';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from \"../../../../api/tasks/tasks-api\";\r\n\r\n\r\ntype TasksPropsType = {\r\n\ttask: TaskType\r\n\ttodolistId: string\r\n\tchangeTaskStatus: (tasksId: string, status: TaskStatuses, todoListsId: string) => void // меняет галку таски\r\n\tchangeTaskTitle: (tasksId: string, tasksTitle: string, todoListsId: string) => void   // меняет название таски\r\n\tremoveTask: (todoListsId: string, tasksId: string,) => void // удаление тасок происходит только по id и типу string. принимает айдишник и ничего не возращает\r\n\r\n\t\r\n}\r\nexport const Task = React.memo ((props: TasksPropsType) => {\r\n\t\r\n\tconst onClickHandler = () => {\r\n\t\t/*debugger*/\r\n\t\treturn props.removeTask(props.task.id, props.todolistId)\r\n\t} //при нажатии кнопки удаляется таска. ВАЖНО функция removeTask вызывается и туда залетают параметры с id и улетает назад в колбеке\r\n\t\r\n\t// меняет галку таски\r\n\tconst onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tlet newIsDoneValue = e.currentTarget.checked;\r\n\t\tprops.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\r\n\t}\r\n\t// меняет название таски\r\n\tconst onChangeTitle = useCallback ( (newItemValue: string) => {\r\n\t\tprops.changeTaskTitle(props.task.id, newItemValue, props.todolistId);\r\n\t}, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\t\r\n\treturn (\r\n\t\t<li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n\t\t\t\r\n\t\t\t{/*подключенный checkbox из material ui*/}\r\n\t\t\t<Checkbox\r\n\t\t\t\tcolor={'primary'}\r\n\t\t\t\tonChange={onChangeStatus}\r\n\t\t\t\tchecked={props.task.status === TaskStatuses.Completed}/> {/*состояние галки*/}\r\n\t\t\t<ChangeTitleNameComponent\r\n\t\t\t\tchangeTitleValue={props.task.title}\r\n\t\t\t\tonChange={onChangeTitle}\r\n\t\t\t/>\r\n\t\t\t{/*добавили иконку удаления, с библиотеками\r\n                                // with yarn\r\n                                yarn add @material-ui/core\r\n                                \r\n                                // with yarn\r\n                                yarn add @material-ui/icons\r\n                                */}\r\n\t\t\t<IconButton onClick={onClickHandler}>\r\n\t\t\t\t<Delete/>\r\n\t\t\t</IconButton>\r\n\t\t</li>)\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddNewItemComponent} from '../../add-new-item/AddNewItemComponent';\r\nimport {ChangeTitleNameComponent} from '../../change-title-item/ChangeTitleNameComponent';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './tasks/Task';\r\nimport {FilterValuesType} from \"./todolists-reducer/todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/tasks/tasks-api\";\r\nimport {getTasksThunkCreator} from \"./tasks-reducer/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// условия типов пропсов для функции тудулист\r\ntype TodolistType = {\r\n    todolistId: string\r\n    todolistTitle: string // в title можно писать только строку\r\n    tasks: Array<TaskType> // тип массив объектов // type TaskType\r\n    removeTask: (todoListsId: string, tasksId: string,) => void // удаление тасок происходит только по id и типу string. принимает айдишник и ничего не возращает\r\n    changeFilter: (filterValue: FilterValuesType, todoListsId: string) => void // в changeFilter можно указать только строку и точное название (\"All\" |(<- или) \"Active\" |(<- или) \"Completed\") или алл или актив или комплетед. ТС будет следить за правильностью написания данных\r\n    addNewTask: (tasksNewTitleInput: string, todoListId: string) => void // функция которая принимает title string и ничего не возвращает\r\n    // addNewTask: (tasksHookNewTITLEInput: string, tasksId: string) => void // функция которая принимает title string и ничего не возвращает\r\n    changeTaskStatus: (tasksId: string, status: TaskStatuses, todoListsId: string) => void // меняет галку таски\r\n    changeTaskTitle: (tasksId: string, tasksTitle: string, todoListsId: string) => void   // меняет название таски\r\n    filterButton: FilterValuesType // кнопки\r\n    removeTodoList: (todoListsId: string) => void  // удаление тудулиста\r\n    changeTodoListTitle: (todoListsId: string, newChangeTitleValue: string) => void  // меняет название тудулиста\r\n}\r\n\r\n\r\nexport const TodoList = React.memo (function (props: TodolistType) { // props: any - что угодно, тоесть не задали четко тип, который будет отслеживаться\r\n    console.log(' TodoList render')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        console.log('log  ' + props.todolistId)\r\n        dispatch(getTasksThunkCreator(props.todolistId))\r\n    },[])\r\n\r\n\r\n    // новое добавление таски\r\n    const addNewTask = useCallback((title: string) => {\r\n        props.addNewTask(title, props.todolistId); //callback функция прыгает в пропсы\r\n    }, [props.addNewTask, props.todolistId]);\r\n\r\n\r\n\t// кнопка all отдает значение наверх и в APP уже меняется стейт\r\n    const onClickAllButton = useCallback (() => {\r\n        props.changeFilter('All', props.todolistId)\r\n    }, [props.changeFilter, props.todolistId]);\r\n\t// кнопка Active отдает значение наверх и в APP уже меняется стейт\r\n    const onClickActiveButton = useCallback (() => {\r\n        props.changeFilter('Active', props.todolistId)\r\n    }, [props.changeFilter, props.todolistId]);\r\n\t// кнопка Completed отдает значение наверх и в APP уже меняется стейт\r\n    const onClickComletedButton = useCallback (() => {\r\n        props.changeFilter('Completed', props.todolistId)\r\n    }, [props.changeFilter, props.todolistId]);\r\n\t\r\n    \r\n\t// удаление тудулистов\r\n    const removeTodoListCallBack = () => {\r\n        props.removeTodoList(props.todolistId)\r\n    }\r\n\r\n\t// изменение названия тудулистов\r\n    const changeTodoListTitleCallBack = useCallback ((newChangeTitleValue: string) => {\r\n        props.changeTodoListTitle(props.todolistId, newChangeTitleValue)\r\n    }, [props.changeTodoListTitle, props.todolistId])\r\n    \r\n    \r\n    let tasksForTodoList = props.tasks;\r\n    if (props.filterButton === 'Active') { // при нажатии кнопки active, фильтр сравниваем из тудулиста\r\n        tasksForTodoList = props.tasks.filter( t => t.status === TaskStatuses.New) // если при фильтре у таски isDone = false, от пропустят таски только с false\r\n    }\r\n    if (props.filterButton === 'Completed') { // при нажатии кнопки Completed, фильтр сравниваем из тудулиста\r\n        tasksForTodoList = props.tasks.filter( t => t.status === TaskStatuses.Completed) // если при фильтре у таски isDone = true, от пропустят таски только с true\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3> {/*заголовки тасок*/}\r\n                <ChangeTitleNameComponent\r\n                    changeTitleValue={props.todolistTitle}\r\n                    onChange={changeTodoListTitleCallBack}\r\n                />\r\n                <IconButton onClick={removeTodoListCallBack}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            \r\n            <AddNewItemComponent addNewItem={addNewTask}/> {/* добавление новой таски */}\r\n            \r\n            <ul>\r\n\r\n                {   props.tasks.map ( (t) => <Task\r\n                        task={t}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        todolistId={props.todolistId}\r\n                        key={t.id}\r\n                    />)     }\r\n            </ul>\r\n            <div>\r\n\t\t\t\t{/*подключенный Button из material ui*/}\r\n                <Button variant={props.filterButton === 'All' ? 'contained' : 'text'} onClick={onClickAllButton} color={'inherit'} >All</Button>\r\n                <Button variant={props.filterButton === 'Active' ? 'contained' : 'text'} onClick={onClickActiveButton} color={'primary'} >Active</Button>\r\n                <Button variant={props.filterButton === 'Completed' ? 'contained' : 'text'} onClick={onClickComletedButton} color={'secondary'} >Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../app/store\";\r\nimport {\r\n\taddTodolistsTC,\r\n\tchangeTodoListFilterAC,\r\n\tchangeTodoTitleTC,\r\n\tfetchTodolistsThunkCreator,\r\n\tFilterValuesType,\r\n\tremoveTodolistsTC,\r\n\tTodolistsReducerType\r\n} from \"./todolist/todolists-reducer/todolists-reducer\";\r\nimport {addTasksTC, changeTaskStatusTC, removeTaskTC} from \"./todolist/tasks-reducer/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/tasks/tasks-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddNewItemComponent} from \"../add-new-item/AddNewItemComponent\";\r\nimport {TodoList} from \"./todolist/Todolist\";\r\nimport {AppTasksType} from \"../app/App\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst todolists = useSelector<RootStateType, Array<TodolistsReducerType>>(state => state.todolists)\r\n\tconst tasks = useSelector<RootStateType, AppTasksType>(state => state.tasks)\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(fetchTodolistsThunkCreator())\r\n\t}, [])\r\n\r\n\r\n\t// удаление таски по id\r\n\tconst removeTask = useCallback((taskId: string, todolistId: string) => {\r\n\t\tdispatch(removeTaskTC(taskId, todolistId))\r\n\t}, [])\r\n\r\n\t// добавление новой таски\r\n\tconst addNewTask = useCallback((tasksNewTitleInput: string, todoListId: string) => {\r\n\t\tdispatch(addTasksTC(tasksNewTitleInput, todoListId))\r\n\t}, [])\r\n\r\n\t// change Status - изменить статус таски, изменить статус в isDone\r\n\tconst changeTaskStatus = useCallback((tasksId: string, status: TaskStatuses, todoListsId: string) => {\r\n\t\tdispatch(changeTaskStatusTC(tasksId, {status}, todoListsId))\r\n\t}, [])\r\n\r\n\t// изменение названия таски\r\n\tconst changeTaskTitle = useCallback((tasksId: string, tasksTitle: string, todoListsId: string) => {\r\n\t\tdispatch(changeTaskStatusTC(tasksId, {title: tasksTitle}, todoListsId))\r\n\t}, [])\r\n\r\n\r\n\t// меняем данные кнопок не хардкодом, а при нажатии (change Filter - изменить фильтр)\r\n\tconst changeFilterTodolist = useCallback((filterValue: FilterValuesType, todoListsId: string) => {\r\n\t\tdispatch(changeTodoListFilterAC(todoListsId, filterValue))\r\n\t}, [])\r\n\r\n\t// удаление тудулиста\r\n\tconst removeTodoList = useCallback((todoListsId: string) => {\r\n\t\tdispatch(removeTodolistsTC(todoListsId))\r\n\t}, [])\r\n\r\n\t// редактирование тудулиста\r\n\tconst changeTodoListTitle = useCallback((todoListsId: string, newChangeTitleValue: string) => {\r\n\t\tdispatch(changeTodoTitleTC(todoListsId, newChangeTitleValue))\r\n\t}, [])\r\n\r\n\t// добавление нового тудулиста\r\n\tconst addNewTodoList = useCallback((title: string) => {\r\n\t\tdispatch(addTodolistsTC(title))\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Grid container style={{padding: '20px'}}>\r\n\t\t\t\t<AddNewItemComponent addNewItem={addNewTodoList}/>\r\n\t\t\t</Grid>\r\n\r\n\t\t\t<Grid container spacing={3}>\r\n\r\n\t\t\t\t{todolists.map(tl => {\r\n\r\n\t\t\t\t\tlet allTodolistTasks = tasks[tl.id];\r\n\t\t\t\t\tlet tasksForTodoList = allTodolistTasks;\r\n\r\n\t\t\t\t\tif (tl.filter === \"Active\") {\r\n\t\t\t\t\t\ttasksForTodoList = allTodolistTasks.filter(t => t.status === TaskStatuses.New);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tl.filter === \"Completed\") {\r\n\t\t\t\t\t\ttasksForTodoList = allTodolistTasks.filter(t => t.status === TaskStatuses.Completed);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t<Paper style={{padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<TodoList\r\n\t\t\t\t\t\t\t\t\tkey={tl.id}\r\n\t\t\t\t\t\t\t\t\ttodolistId={tl.id}\r\n\t\t\t\t\t\t\t\t\ttodolistTitle={tl.title} // заголовки компоненты\r\n\t\t\t\t\t\t\t\t\ttasks={tasksForTodoList}  // отфильтрованные таски по кнопкам\r\n\t\t\t\t\t\t\t\t\tremoveTask={removeTask} //  удаление таски\r\n\t\t\t\t\t\t\t\t\tchangeFilter={changeFilterTodolist} // юзабельность кнопок all active completed\r\n\t\t\t\t\t\t\t\t\taddNewTask={addNewTask} // добавление новой таски\r\n\t\t\t\t\t\t\t\t\tchangeTaskStatus={changeTaskStatus} //передаем функцию, чтобы менять статус таске\r\n\t\t\t\t\t\t\t\t\tchangeTaskTitle={changeTaskTitle} //передаем функцию, чтобы менять статус таске\r\n\t\t\t\t\t\t\t\t\tfilterButton={tl.filter} // передаем массив фильтров let [filter, setFilter] = useState <FilterValuesType>\r\n\t\t\t\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\t\t\t\tchangeTodoListTitle={changeTodoListTitle}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Grid>\r\n\t\t</>\r\n\t)\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {RootStateType} from '../app/store'\r\nimport {setErrorAC} from '../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackBar() {\r\n\tconst [open, setOpen] = React.useState(true)\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\t\tif (reason === 'clickaway') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(setErrorAC(null))\r\n\t\t//setOpen(false)\r\n\t}\r\n\r\n\tconst error = useSelector<RootStateType, string | null>( state => state.app.error)\r\n\r\n\tconst isOpen = error !== null\r\n\r\n\treturn (\r\n\t\t<Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n\t\t\t<Alert onClose={handleClose} severity=\"error\">\r\n\t\t\t\t{error}\r\n\t\t\t</Alert>\r\n\t\t</Snackbar>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TaskType} from '../../api/tasks/tasks-api'\r\nimport {TodolistsList} from \"../todolists-lists/TodolistsList\";\r\nimport {ErrorSnackBar} from '../error-snackbar/ErrorSnackBar'\r\nimport {useSelector} from 'react-redux'\r\nimport {RootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\n\r\n\r\nfunction App() {\r\n\tconsole.log('App render')\r\n\tconst status = useSelector<RootStateType, RequestStatusType> (state => state.app.status)\r\n\treturn (\r\n\t\t<div className={'App'}>\r\n\t\t\t<ErrorSnackBar />\r\n\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n\t\t\t\t\t\t<Menu/>\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\tNews\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Button color=\"inherit\">Login</Button>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t\t{status === 'loading' && <LinearProgress color={'secondary'} />}\r\n\t\t\t</AppBar>\r\n\t\t\t<Container fixed>\r\n\t\t\t\t<TodolistsList />\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport type AppTasksType = {\r\n\t[key: string]: Array<TaskType>\r\n}\r\n\r\nexport default App\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './components/app/store';\r\nimport App from './components/app/App';\r\n\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>\r\n\t,  document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}